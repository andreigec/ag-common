{"version":3,"file":"Prompt-Dialog-stories.5cc87d3f.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA;;AAEA;;AAEA;;;;;AAKA;;AAEA;;AAEA;;;AAKA;AACA;AAGA;AACA;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClCA;;;;;;;;;;;;;;;;ACfA;;;;;;;;;;;ACGA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;AAUA;;;;;;;AAAA;;AAIA;;;;;AChDA;;;;AAMA;;;;;;AAQA;;;AAKA;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;ACfA;;;AAKA;;;AAKA;;AAIA;;;;;AAKA;;;AAKA","sources":["webpack://ag-common/./src/ui/components/Button/index.tsx","webpack://ag-common/./src/ui/components/Close/index.tsx","webpack://ag-common/./src/ui/components/FlexColumn/index.tsx","webpack://ag-common/./src/ui/components/Modal/Modal.tsx","webpack://ag-common/./src/ui/components/Prompt/Modal.tsx","webpack://ag-common/./src/ui/styles/standaloneStyles.ts"],"sourcesContent":["'use client';\n\nimport { css } from '@emotion/react';\nimport type { StyledComponent } from '@emotion/styled';\nimport styled from '@emotion/styled';\nimport type { JSX, KeyboardEventHandler, MouseEventHandler } from 'react';\nimport React from 'react';\n\nimport { colours } from '../../styles/colours';\n\nexport const ButtonBase = css`\n  text-decoration: none;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border: 0;\n  font-weight: bold;\n  font-family: inherit;\n  font-size: 1.2rem;\n  border-radius: 0.5rem;\n  cursor: pointer;\n  height: 3rem;\n  line-height: 1rem;\n  &:hover {\n    filter: saturate(1.5);\n  }\n  padding-left: 1rem;\n  padding-right: 1rem;\n  color: white;\n\n  &[data-disabled='true'] {\n    cursor: default !important;\n    background-color: #888 !important;\n  }\n\n  &[data-theme='green'] {\n    background-color: ${colours.darkGreen};\n    &[data-invert='true'] {\n      color: ${colours.darkGreen};\n      background-color: white;\n      border: solid 1px ${colours.darkGreen};\n    }\n  }\n\n  &[data-theme='red'] {\n    background-color: ${colours.orangeRed};\n    &[data-invert='true'] {\n      color: ${colours.orangeRed};\n      background-color: white;\n      border: solid 1px ${colours.orangeRed};\n    }\n  }\n`;\n\nconst BaseButton = styled.button`\n  ${ButtonBase}\n`;\n\nconst BaseA = styled.a`\n  ${ButtonBase}\n`;\n\nexport interface IButton {\n  title?: string;\n  invert?: boolean;\n  disabled?: boolean;\n  className?: string;\n  onClick?: MouseEventHandler<HTMLButtonElement>;\n  onKeyDown?: KeyboardEventHandler<HTMLButtonElement>;\n  children: string | JSX.Element;\n  href?: string;\n  colourTheme?: 'green' | 'red';\n}\nexport const Button = (props: IButton) => {\n  const Component: StyledComponent<'button', any> = props.href\n    ? (BaseA as any)\n    : BaseButton;\n\n  return (\n    <Component\n      className={props.className}\n      data-invert={props.invert}\n      data-disabled={props.disabled ?? false}\n      role=\"button\"\n      title={props.title || undefined}\n      data-theme={props.colourTheme ?? 'green'}\n      {...props}\n    >\n      {props.children}\n    </Component>\n  );\n};\n","'use client';\nimport styled from '@emotion/styled';\nimport React from 'react';\n\nimport { filterDataProps } from '../../helpers/dom';\n\nconst Base = styled.div`\n  position: absolute;\n  z-index: 1;\n  width: 32px;\n  height: 32px;\n  opacity: 0.3;\n  cursor: pointer;\n  background-color: white;\n  top: 0;\n  right: 0;\n  &:hover {\n    opacity: 1;\n  }\n  &:before,\n  &:after {\n    position: absolute;\n    left: 15px;\n    content: ' ';\n    height: 33px;\n    width: 2px;\n    background-color: #333;\n  }\n  &:before {\n    transform: rotate(45deg);\n  }\n  &:after {\n    transform: rotate(-45deg);\n  }\n`;\nexport interface IClose {\n  onClick?: (ev: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n  className?: string;\n}\nexport const Close = (p: IClose) => (\n  <Base\n    {...filterDataProps(p)}\n    className={p.className}\n    onClick={(e) => p.onClick?.(e)}\n  />\n);\n","'use client';\nimport styled from '@emotion/styled';\nimport React from 'react';\n\nimport type { IFlexColumn } from '../RowOrColumn';\n\nconst Base = styled.div`\n  position: relative;\n  display: flex;\n  flex-flow: column;\n  flex-grow: 1;\n  width: 100%;\n  height: 100%;\n  &[data-center='true'] {\n    justify-content: center;\n    align-items: center;\n  }\n  &[data-nogrow='true'] {\n    flex-grow: 0;\n    width: unset;\n    height: unset;\n  }\n`;\n\nexport const FlexColumn = (props: IFlexColumn) => (\n  <Base\n    data-nogrow={props.noGrow ?? false}\n    data-center={props.center ?? false}\n    {...props}\n  >\n    {props.children}\n  </Base>\n);\n","'use client';\nimport styled from '@emotion/styled';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { createPortal } from 'react-dom';\n\nimport { filterDataProps } from '../../helpers/dom';\nimport { useLockBodyScroll } from '../../helpers/useLockBodyScroll';\nimport { useOnClickOutside } from '../../helpers/useOnClickOutside';\nimport { bounce } from '../../styles';\nimport { Close } from '../Close';\nimport type { IModal } from './types';\n\nconst globalId = 'ag-modal-portal';\n\nconst FixedBackground = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  z-index: 2;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst ModalBase = styled.div`\n  display: flex;\n  position: absolute;\n  z-index: 1;\n  background-color: white;\n  border: solid 1px transparent;\n  border-radius: 0.5rem;\n  box-shadow:\n    0 1px 10px 0 rgba(0, 0, 0, 0.6),\n    0 2px 15px 0 rgba(0, 0, 0, 0.05);\n  max-width: 95vw;\n  max-height: 95vh;\n  overflow: hidden;\n  &[data-position='left'] {\n    left: 0;\n  }\n  &[data-position='right'] {\n    right: 0;\n  }\n  &[data-topposition='top'] {\n    top: 0;\n  }\n  &[data-topposition='bottom'] {\n    bottom: 0;\n  }\n  ${bounce('data-bounced')}\n`;\nexport const ModalItem = styled.div`\n  display: flex;\n  padding: 1rem;\n\n  &:hover {\n    background-color: #eee;\n  }\n`;\nconst CloseStyled = styled(Close)`\n  z-index: 1;\n`;\n\nexport const Modal = (p: IModal) => {\n  const {\n    open,\n    setOpen,\n    children,\n    position = 'left',\n    topPosition = 'top',\n    showCloseButton = true,\n    closeOnMoveMouseOutside = false,\n    className,\n    closeOnClickOutside = true,\n    portalId: pidraw,\n    style,\n  } = p;\n  let portalId = pidraw;\n  if (portalId === undefined) {\n    portalId = globalId;\n  }\n\n  useLockBodyScroll(p.open);\n  const [portalElem, setPortalElem] = useState<Element | undefined | null>();\n\n  useEffect(() => {\n    if (\n      portalId === null ||\n      document.querySelectorAll(`#${portalId}`).length > 0\n    ) {\n      return;\n    }\n    const d = document.createElement('div');\n    d.id = portalId;\n    d.style.position = 'fixed';\n    d.style.zIndex = '10';\n    document.body.appendChild(d);\n    return () => {\n      try {\n        document.querySelector(`#${portalId}`)?.remove();\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      } catch (e) {\n        //\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const [bounced, setBounced] = useState(false);\n  const ref = useRef<HTMLDivElement>(null);\n  useOnClickOutside(\n    {\n      disabled: !open,\n      ref,\n      moveMouseOutside: closeOnMoveMouseOutside,\n    },\n    (e) => {\n      //there might be multiple models open, only close the last one on the stack\n      if (portalElem) {\n        const myid = Array.prototype.indexOf.call(\n          portalElem.children,\n          //parent because fixed background is first\n          ref.current?.parentElement,\n        );\n        const childcount = portalElem.children.length;\n        if (myid + 1 !== childcount) {\n          return;\n        }\n      }\n      if (closeOnClickOutside && open) {\n        setOpen(false, e);\n        setBounced(false);\n      }\n    },\n  );\n\n  useEffect(() => {\n    if (!bounced && open) {\n      setBounced(true);\n    }\n  }, [open, bounced]);\n\n  useEffect(() => {\n    if (portalElem === undefined && portalId) {\n      setPortalElem(document.getElementById(portalId));\n    }\n  }, [portalElem, portalId]);\n\n  if (!open) {\n    return <></>;\n  }\n\n  const Content = (\n    <FixedBackground>\n      <ModalBase\n        {...filterDataProps(p)}\n        data-bounced={bounced}\n        data-position={position}\n        data-topposition={topPosition}\n        ref={ref}\n        className={className}\n        style={style}\n      >\n        {showCloseButton && (\n          <CloseStyled\n            data-type=\"modal-close\"\n            onClick={(e) => setOpen(false, e as unknown as Event)}\n          />\n        )}\n        {children}\n      </ModalBase>\n    </FixedBackground>\n  );\n  if (portalId && portalElem === undefined) {\n    return null;\n  }\n  if (portalId && portalElem) {\n    return createPortal(Content, portalElem);\n  }\n\n  return Content;\n};\n","'use client';\nimport styled from '@emotion/styled';\nimport React, { useState } from 'react';\n\nimport { Button } from '../Button';\nimport { FlexColumn } from '../FlexColumn';\nimport { FlexRow } from '../FlexRow';\nimport { Modal } from '../Modal/Modal';\nimport { TextEdit } from '../TextEdit';\nimport type { IPromptModal } from './types';\n\nconst Base = styled.div`\n  width: 95vw;\n  max-width: 30rem;\n  height: 50vh;\n  max-height: 15rem;\n`;\n\nconst Content = styled(FlexColumn)`\n  padding: 1rem;\n  height: calc(100% - 2rem);\n  width: calc(100% - 2rem);\n`;\n\nconst TopText = styled.div`\n  font-weight: bold;\n  border-bottom: solid 1px #ccc;\n  padding-bottom: 0.25rem;\n  font-size: 1.5rem;\n  margin-bottom: 1rem;\n`;\n\nconst BottomText = styled.div`\n  padding-bottom: 0.25rem;\n  font-size: 1.1rem;\n`;\n\nconst Bottom = styled(FlexRow)`\n  margin-top: auto;\n  justify-content: flex-end;\n  > button:first-of-type {\n    margin-right: 1rem;\n  }\n`;\nexport const PromptModal = ({\n  root,\n  wrapper,\n  res,\n  bottomText,\n  topText,\n  okText = 'OK',\n  cancelText = 'Cancel',\n  defaultValue,\n  placeholder,\n  style,\n}: IPromptModal) => {\n  const [text, setText] = useState(defaultValue || '');\n  const ret = (v: string | undefined) => {\n    try {\n      res(v);\n    } finally {\n      try {\n        root?.unmount();\n        wrapper?.remove();\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      } catch (e) {\n        //\n      }\n    }\n  };\n\n  return (\n    <Modal\n      position=\"center\"\n      topPosition=\"center\"\n      open={true}\n      setOpen={() => ret(undefined)}\n      showCloseButton={false}\n      closeOnClickOutside={false}\n    >\n      <Base>\n        <Content style={style}>\n          {topText && <TopText>{topText}</TopText>}\n          <BottomText>{bottomText}</BottomText>\n          <TextEdit\n            defaultValue={text}\n            onSubmit={(c, enter) => {\n              if (enter) {\n                ret(c);\n              } else {\n                setText(c);\n              }\n            }}\n            placeholder={placeholder}\n            defaultEditing={{ focus: true }}\n            singleLine\n            noGrow\n            allowUndo={false}\n          />\n          <Bottom noGrow>\n            <Button onClick={() => ret(text)}>{okText}</Button>\n            <Button invert onClick={() => ret(undefined)}>\n              {cancelText}\n            </Button>\n          </Bottom>\n        </Content>\n      </Base>\n    </Modal>\n  );\n};\n","'use client';\nimport styled from '@emotion/styled';\n\nimport { smallScreen } from './media';\n\nexport const SOBase = styled.div`\n  display: flex;\n  width: 100%;\n  flex-grow: 1;\n  flex-flow: column;\n  overflow: hidden;\n  align-content: flex-start;\n  align-items: flex-start;\n\n  > h1,\n  h2,\n  > p {\n    white-space: pre-wrap;\n    font-size: 1.2rem;\n  }\n  h1,\n  h2 {\n    font-weight: normal;\n    font-size: 2rem;\n    flex-basis: 100%;\n    margin: 0;\n  }\n`;\n\nexport const SOBR = styled.div`\n  height: 0.5rem;\n  width: 0.5rem;\n`;\n\nexport const SOB = styled.div`\n  font-size: 1.4em;\n  font-weight: bold;\n`;\n\nexport const SOP = styled.div`\n  margin-bottom: 1rem;\n`;\n\nexport const SOCenter = styled.div`\n  display: flex;\n  flex-flow: column;\n  margin-left: auto;\n  margin-right: auto;\n  @media ${smallScreen} {\n    width: calc(100% - 2rem);\n  }\n`;\n\nexport const SOA = styled.a`\n  width: fit-content;\n  color: rgb(125, 171, 255);\n  text-decoration: none;\n  &:hover {\n    text-decoration: underline;\n  }\n  &[data-inline='true'] {\n    display: inline-block;\n    margin-left: 5px;\n    margin-right: 5px;\n  }\n  &[data-inline='false'] {\n    display: flex;\n    margin: auto;\n  }\n`;\n"],"names":[],"sourceRoot":""}
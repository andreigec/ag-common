{"version":3,"file":"5666.89cd1004.iframe.bundle.js","mappings":";;;;;;;;;AAsBA;;;;AAMA;;;;;;;;;AA8BA;;;;;;;;;;;;;;;;AClCA","sources":["webpack://ag-common/./src/ui/components/DarkMode/Base.tsx","webpack://ag-common/./src/ui/components/FlexColumn/index.tsx"],"sourcesContent":["'use client';\nimport styled from '@emotion/styled';\nimport type { CSSProperties, Dispatch, JSX, SetStateAction } from 'react';\nimport React, { useState } from 'react';\n\nimport { useCookie } from '../../helpers/cookie/use';\nimport { Computer, Moon, Sun } from '../../icons';\nimport { FlexColumn } from '../FlexColumn';\nimport { Icon } from '../Icon';\nimport { TDarkMode, TDarkModeCalc } from './types';\n\nconst Base = styled.div`\n  display: flex;\n  flex-flow: row;\n  &[data-mode='vert'] {\n    flex-flow: column;\n  }\n  overflow: hidden;\n  justify-content: space-between;\n  border-radius: 2rem;\n`;\n\nconst IconStyled = styled(Icon)`\n  > svg {\n    height: 60%;\n  }\n`;\n\nconst Label = styled(FlexColumn)`\n  border-radius: 50%;\n  overflow: hidden;\n  cursor: pointer;\n\n  &[data-selected='true'] {\n    background-color: white;\n    cursor: default;\n  }\n`;\n\nconst getColours = (p: TDarkMode, vert: boolean) => {\n  const deg = vert ? '180deg' : '90deg';\n  switch (p) {\n    case TDarkMode.dark: {\n      const d1 = 'rgba(173,128,227,1)';\n      const d2 = 'rgba(106,44,181,1)';\n      return [d1, `linear-gradient(${deg}, ${d1} 0%, ${d2} 76%)`];\n    }\n    case TDarkMode.light: {\n      const l1 = 'rgba(255,169,54,1)';\n      const l2 = 'rgba(255,189,100,1)';\n      return [l1, `linear-gradient(${deg}, ${l1} 0%, ${l2} 76%)`];\n    }\n    case TDarkMode.system: {\n      return ['green', 'green'];\n    }\n  }\n};\n\nconst modes: {\n  mode: TDarkMode;\n  icon: (p: { style: { fill: string } }) => JSX.Element;\n}[] = [\n  { mode: TDarkMode.dark, icon: Moon },\n  { mode: TDarkMode.system, icon: Computer },\n  { mode: TDarkMode.light, icon: Sun },\n];\n\nexport interface IDarkMode {\n  onSubmit?: (p: TDarkMode) => void;\n  /** default horiz */\n  mode?: 'vert' | 'horiz';\n  /** default 2.5rem */\n  iconSize?: string;\n  className?: string;\n  style?: CSSProperties;\n  cookieDocument: string;\n}\n\nexport interface IUseDarkMode {\n  darkmode: TDarkMode;\n  setDarkmode: Dispatch<SetStateAction<TDarkMode>>;\n  /** converts system to the required output */\n  calcDarkMode: () => TDarkModeCalc;\n}\n\nexport const UseDarkMode = ({\n  cookieDocument,\n}: {\n  cookieDocument: string;\n}): IUseDarkMode => {\n  const [darkmode, setDarkmode] = useCookie<TDarkMode>({\n    defaultValue: TDarkMode.system,\n    name: 'darkmode',\n    cookieDocument,\n    parse: (v) => Number(v) as TDarkMode,\n    stringify: (v) => v.toString(),\n  });\n\n  const calcDarkMode = (): TDarkModeCalc => {\n    const isDarkMode = window.matchMedia(\n      '(prefers-color-scheme: dark)',\n    ).matches;\n\n    if (darkmode === TDarkMode.system) {\n      return isDarkMode ? TDarkModeCalc.dark : TDarkModeCalc.light;\n    }\n\n    return darkmode === TDarkMode.dark\n      ? TDarkModeCalc.dark\n      : TDarkModeCalc.light;\n  };\n\n  return {\n    darkmode,\n    setDarkmode,\n    calcDarkMode,\n  };\n};\n\n/** shows darkmode toggle. Persists to cookie, and modifies html classList with either dark-mode or light-mode\n * this method has the darkmode passed in, so UseDarkMode can be used globally\n */\nexport const DarkModeAux = ({\n  iconSize = '2.5rem',\n  className,\n  mode,\n  onSubmit,\n  style,\n  dm,\n}: IDarkMode & {\n  dm: IUseDarkMode;\n}) => {\n  const [index, setIndex] = useState<number>(\n    modes.findIndex((d) => d.mode === dm.darkmode),\n  );\n  const [fill, background] = getColours(modes[index].mode, mode === 'vert');\n  const twCalc = `calc(${iconSize} + ${iconSize} + ${iconSize} )`;\n  const setDarkmode = (newDarkMode: TDarkMode) => {\n    let className = '';\n    if (newDarkMode === TDarkMode.dark) {\n      className += 'dark-mode';\n    } else if (newDarkMode === TDarkMode.light) {\n      className += 'light-mode';\n    } else {\n      className = '';\n    }\n    try {\n      document.getElementsByTagName('html')[0].classList.remove('dark-mode');\n      document.getElementsByTagName('html')[0].classList.remove('light-mode');\n      if (className) {\n        document.getElementsByTagName('html')[0].classList.add(className);\n      }\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    } catch (e) {\n      //\n    }\n\n    dm.setDarkmode(newDarkMode);\n    onSubmit?.(newDarkMode);\n  };\n\n  return (\n    <Base\n      className={className}\n      data-mode={mode ?? 'horiz'}\n      style={{\n        ...style,\n        background,\n        border: `solid 2px ${fill}`,\n        width: twCalc,\n        height: iconSize,\n\n        ...(mode === 'vert' && {\n          width: iconSize,\n          height: twCalc,\n        }),\n      }}\n    >\n      {modes.map((v, i) => {\n        const selected = index === i;\n        return (\n          <Label\n            data-selected={selected}\n            style={{ width: iconSize, height: iconSize }}\n            // eslint-disable-next-line react/no-array-index-key\n            key={i.toString()}\n            onClick={() => {\n              if (index === i) {\n                return;\n              }\n              setIndex(i);\n              setDarkmode(v.mode);\n            }}\n          >\n            <IconStyled>\n              {v.icon({ style: { fill: selected ? fill : 'white' } })}\n            </IconStyled>\n          </Label>\n        );\n      })}\n    </Base>\n  );\n};\n\n/** shows darkmode toggle. Persists to cookie, and modifies html classList with either dark-mode or light-mode */\nexport const DarkMode = (p: IDarkMode) => {\n  const dm = UseDarkMode({ cookieDocument: p.cookieDocument });\n  return DarkModeAux({ ...p, dm });\n};\n","'use client';\nimport styled from '@emotion/styled';\nimport React from 'react';\n\nimport type { IFlexColumn } from '../RowOrColumn';\n\nconst Base = styled.div`\n  position: relative;\n  display: flex;\n  flex-flow: column;\n  flex-grow: 1;\n  width: 100%;\n  height: 100%;\n  &[data-center='true'] {\n    justify-content: center;\n    align-items: center;\n  }\n  &[data-nogrow='true'] {\n    flex-grow: 0;\n    width: unset;\n    height: unset;\n  }\n`;\n\nexport const FlexColumn = (props: IFlexColumn) => (\n  <Base\n    data-nogrow={props.noGrow ?? false}\n    data-center={props.center ?? false}\n    {...props}\n  >\n    {props.children}\n  </Base>\n);\n"],"names":[],"sourceRoot":""}
{"version":3,"file":"TabBar-stories.0e5a76ce.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CA;;;;;;;;;;;;;AAwCA;;;;;;;;;;AChEA;;;;;;;;;;;;;;AAeA;;;;AAKA;;;AA0BA;ACtDA;AAGA;;;;;;AAoBA;;AAGA;;;;AAMA;;;;;;AAwBA;;;AAyBA;;;;;;;;AAZA;AAYA","sources":["webpack://ag-common/./src/ui/components/Icon/index.tsx","webpack://ag-common/./src/ui/components/TabBar/index.tsx","webpack://ag-common/./src/ui/styles/common.tsx"],"sourcesContent":["'use client';\nimport styled from '@emotion/styled';\nimport type { CSSProperties } from 'react';\nimport React from 'react';\n\nimport { removeUndefValuesFromObject } from '../../../common/helpers/object';\nimport { HardOutline } from '../../styles/common';\n\nexport const IconF = styled.span`\n  transition: all 200ms;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 2rem;\n  cursor: inherit;\n  width: 100%;\n  height: 100%;\n  padding: 0;\n  margin: unset;\n  &[data-chnd='true'] {\n    cursor: pointer;\n    &:hover {\n      filter: saturate(3);\n    }\n  }\n\n  > svg {\n    flex-grow: 1;\n  }\n\n  &[data-hasfill='true'] {\n    fill: var(--fill);\n\n    svg {\n      fill: var(--fill);\n    }\n\n    linearGradient > *,\n    radialGradient > * {\n      stop-color: var(--fill) !important;\n    }\n  }\n\n  &[data-hasoutline='true'] {\n    ${HardOutline('var(--outlinecolour)')}\n  }\n\n  svg {\n    width: 100%;\n    height: 100%;\n    object-fit: contain;\n    aspect-ratio: 1/1;\n  }\n\n  img {\n    object-fit: contain;\n  }\n`;\n\nexport interface IIcon {\n  disabled?: boolean;\n  outline?: string;\n  rotate?: number;\n  canHover?: boolean;\n  onClick?: (e: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void;\n  children?: React.ReactNode;\n  role?: string;\n  title?: string;\n  tabIndex?: number;\n  className?: string;\n  style?: {\n    /** default 100% */\n    width?: string;\n    /** default 100% */\n    height?: string;\n    /** default 0 */\n    padding?: string;\n    /** default unset */\n    margin?: string;\n    /** pass fill down to svg */\n    fill?: string;\n  } & CSSProperties;\n}\n\nexport const Icon = (pr: IIcon) => {\n  const { className, children, disabled, onClick } = pr;\n  const CHND = pr.canHover && !pr.disabled;\n  const style: CSSProperties = removeUndefValuesFromObject({\n    ...(pr.style ?? {}),\n    '--fill': pr.style?.fill ?? null,\n    width: pr.style?.width,\n    height: pr.style?.height,\n    padding: pr.style?.padding,\n    margin: pr.style?.margin,\n    transform: !pr.rotate ? null : `rotate(${pr.rotate || 0}deg)`,\n    filter: !pr.disabled ? null : 'grayscale(1)',\n    '--outlinecolour': pr.outline || null,\n  });\n\n  return (\n    <IconF\n      {...pr}\n      className={className}\n      onClick={(e: React.MouseEvent<HTMLSpanElement, MouseEvent>) =>\n        !disabled && onClick?.(e)\n      }\n      style={style}\n      data-chnd={CHND}\n      data-hasoutline={pr.outline}\n      data-hasfill={!!pr.style?.fill}\n      data-type=\"iconbox\"\n    >\n      {children}\n    </IconF>\n  );\n};\n","'use client';\nimport styled from '@emotion/styled';\nimport type { CSSProperties } from 'react';\nimport type { JSX } from 'react';\nimport React, { useState } from 'react';\n\nimport { Icon } from '../Icon';\n\nconst Base = styled.div`\n  display: flex;\n  flex-flow: row;\n  &[data-mode='vert'] {\n    flex-flow: column;\n  }\n  overflow: hidden;\n  justify-content: space-around;\n  width: 100%;\n  margin: auto;\n`;\n\nconst Item = styled.div`\n  display: flex;\n  flex-flow: column;\n  align-items: center;\n  border-radius: 2rem;\n  justify-content: center;\n  height: calc(100% - 1rem);\n  padding-left: 1rem;\n  padding-right: 1rem;\n  width: 10rem;\n  &[data-selected='false'] {\n    opacity: 0.8;\n    cursor: pointer;\n  }\n`;\nconst IconStyled = styled(Icon)`\n  height: 1.5rem;\n  max-height: 80%;\n  max-width: fit-content;\n`;\nconst Text = styled.div`\n  max-height: 50%;\n  overflow: hidden;\n`;\n\nexport interface ITabBar {\n  onChangeIndex: (i: number) => void;\n\n  className?: string;\n  cookieDocument: string;\n  style?: CSSProperties;\n  items: {\n    text: string;\n    icon: (p: { style: { fill?: string } }) => JSX.Element;\n  }[];\n  theme?: {\n    /** default black */\n    front?: string;\n    /** default blue */\n    frontSelected?: string;\n    /** default #eee */\n    back?: string;\n  };\n  /** default 0 */\n  defaultSelectedIndex?: number;\n}\nexport const TabBar = (p: ITabBar) => {\n  const {\n    defaultSelectedIndex = 0,\n    theme: { back = '#eee', frontSelected = '#4d76ff', front = 'black' },\n  } = { ...p, theme: p.theme ?? {} };\n\n  const [index, setIndex] = useState<number>(defaultSelectedIndex);\n\n  return (\n    <Base className={p.className} style={p.style}>\n      {p.items.map((v, i) => {\n        const selected = index === i;\n        return (\n          <Item\n            style={{\n              backgroundColor: back,\n              color: front,\n              ...(selected && { color: frontSelected }),\n              maxWidth: `${100 / p.items.length}%`,\n            }}\n            data-selected={selected}\n            // eslint-disable-next-line react/no-array-index-key\n            key={i.toString()}\n            onClick={() => {\n              if (index === i) {\n                return;\n              }\n              setIndex(i);\n              p.onChangeIndex(i);\n            }}\n          >\n            <IconStyled style={{ width: '50%' }}>\n              {v.icon({\n                style: { ...(selected && { fill: frontSelected }) },\n              })}\n            </IconStyled>\n            <Text data-type=\"text\">{v.text}</Text>\n          </Item>\n        );\n      })}\n    </Base>\n  );\n};\n","'use client';\nimport { css } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport type { CSSProperties } from 'react';\n\nimport { colours } from './colours';\n\n/** function that returns css that gives a text outline drop shadow.\n * @param outlineColour default='white'\n * @param sizePx default = 1px\n */\nexport const HardOutline = (outlineColour = 'white', sizePx = 1) => css`\\\nfilter: ${HardOutlineFilter(outlineColour, sizePx)};\n`;\n\nexport const HardOutlineFilter = (outlineColour = 'white', sizePx = 1) => {\n  const px = `${sizePx}px`;\n\n  return `drop-shadow(${px} ${px} 0px ${outlineColour})\n  drop-shadow(-${px} ${px} 0px ${outlineColour})\n  drop-shadow(${px} -${px} 0px ${outlineColour})\n  drop-shadow(-${px} -${px} 0px ${outlineColour})`;\n};\n\n/** disable user text selection */\nexport const NoTextSelect = css`\n  user-select: none; /* supported by Chrome and Opera */\n  -webkit-user-select: none; /* Safari */\n  -khtml-user-select: none; /* Konqueror HTML */\n  -moz-user-select: none; /* Firefox */\n  -ms-user-select: none; /* Internet Explorer/Edge */\n`;\n\n/** enable text overflow\n * @param lines number of lines before overflow\n */\nexport const TextOverflowEllipsis = (lines: number) => css`\n  display: -webkit-box;\n  -webkit-line-clamp: ${lines};\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\n/** stop dragging of element */\nexport const noDrag: {\n  draggable: boolean;\n  onDragStart: React.DragEventHandler<HTMLDivElement>;\n  onTouchStart: React.TouchEventHandler<HTMLDivElement>;\n} = {\n  draggable: false,\n  onDragStart: (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n  },\n  onTouchStart: (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n  },\n};\n\n/** apply bounce effect given a condition */\nexport const bounce = (bounceattr: string) => css`\n  transition:\n    opacity 0.2s ease,\n    transform 0.2s cubic-bezier(0.02, 1.5, 0.74, 1.23);\n  transform-origin: 50% 50%;\n  transform: translateY(-5px);\n  &[${bounceattr}='true'] {\n    transform: translateY(0);\n  }\n`;\n\nexport const Card = styled.div`\n  background-color: white;\n  margin: 0.5rem;\n\n  position: relative;\n  border-radius: 0.5rem;\n  max-width: 40rem;\n  padding: 1rem;\n  border: solid 2px ${colours.lighter};\n`;\n\nexport interface IVarStyles {\n  /** default var(--main-fg) */\n  color: string;\n  /** default var(--main-bg) */\n  backgroundColor: string;\n  /** default var(--main-bg-mid) */\n  borderColor: string;\n}\n\nexport const getVarStyles = (\n  raw?: Partial<IVarStyles & CSSProperties>,\n): IVarStyles => ({\n  ...raw,\n  color: raw?.color ?? 'var(--main-fg)',\n  backgroundColor: raw?.backgroundColor ?? 'var(--main-bg)',\n  borderColor: raw?.borderColor ?? 'var(--main-bg-mid)',\n});\n"],"names":[],"sourceRoot":""}
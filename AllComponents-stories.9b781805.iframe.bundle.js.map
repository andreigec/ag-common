{"version":3,"file":"AllComponents-stories.9b781805.iframe.bundle.js","mappings":";;;;;;;;AA8BA;;;;AAMA;;;;;ACtBA;;;AAeA;;;;;;;;;;;;;;;;ACFA;AACA;AAGA;AACA;AAGA;;;;;;;AASA;;AAEA;;AAwBA;;;;;;;;;;;;;;;;;;;;;;;;;;AClCA;;AAEA;;AAEA;;;;;AAKA;;AAEA;;AAEA;;;AAKA;AACA;AAGA;AACA;AAcA;;;;;AC3DA;;;;AAgBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACSA;;;;;;;ACxBA;;;;;AAOA;;;;;;;;;;;AA2BA;;;;;;;;;AC9BA;;AAZA;AAAA;AAAA;AAmBA;;AAnBA;AAmCA;;;;;;AC3BA;;;;;;;;;AAWA;;;;AAMA;;AAIA;;;;AAgBA;;;;AC1CA;;;;;;;;;;;;AAcA;;;;;;;;;;;;;;;;;;;;AA8BA","sources":["webpack://ag-common/./stories/AllComponents.stories.tsx","webpack://ag-common/./src/ui/components/Accordion/index.tsx","webpack://ag-common/./src/ui/components/BorderGradient/index.tsx","webpack://ag-common/./src/ui/components/Button/index.tsx","webpack://ag-common/./src/ui/components/Chevron/index.tsx","webpack://ag-common/./src/ui/components/Close/index.tsx","webpack://ag-common/./src/ui/components/ProgressBar/index.tsx","webpack://ag-common/./src/ui/components/SparkLine/index.tsx","webpack://ag-common/./src/ui/components/Table/index.tsx","webpack://ag-common/./src/ui/components/TextWithButton/index.tsx"],"sourcesContent":["// eslint-disable-next-line import/no-extraneous-dependencies\nimport styled from '@emotion/styled';\nimport type { Meta, StoryFn } from '@storybook/react';\nimport React from 'react';\nimport type { JSX } from 'react';\nimport { DefaultWithArgs as Accordion } from './Accordion.stories';\nimport { DefaultWithArgs as BorderGradient } from './BorderGradient.stories';\nimport { DefaultWithArgs as Button } from './Button.stories';\nimport { DefaultWithArgs as Chevron } from './Chevron.stories';\nimport { DefaultWithArgs as Close } from './Close.stories';\nimport { DefaultWithArgs as DarkMode } from './DarkMode.stories';\nimport { DefaultWithArgs as DropdownList } from './DropdownList/Value.stories';\nimport { DefaultWithArgs as OpenApiCodeBlock } from './OpenApiCodeBlock/index.stories';\nimport { DefaultWithArgs as ProgressBar } from './ProgressBar.stories';\nimport { DefaultWithArgs as Search } from './Search/Inline.stories';\nimport { DefaultWithArgs as SparkLine } from './SparkLine.stories';\nimport { DefaultWithArgs as Table } from './Table.stories';\nimport { DefaultWithArgs as TextWithButton } from './TextWithButton.stories';\nimport { DefaultWithArgs as TreeChart } from './TreeChart/single.stories';\n\nconst Base = styled.div`\n  height: 3rem;\n  border: solid 1px black;\n  margin-bottom: 2rem;\n  display: relative;\n  &[data-big='true'] {\n    height: 10rem;\n  }\n`;\n\nconst Components = styled.div`\n  display: flex;\n  flex-flow: column;\n  width: 50%;\n`;\n\nconst components: /** name, component, isbig */\n[string, () => JSX.Element, boolean][] = [\n  ['Accordion', Accordion, false],\n  ['BorderGradient', BorderGradient, false],\n  ['Button', Button, false],\n  ['Chevron', Chevron, false],\n  ['Close', Close, true],\n  ['DropdownList', DropdownList, false],\n  ['DarkMode', DarkMode, false],\n  ['OpenApiCodeBlock', OpenApiCodeBlock, true],\n  ['ProgressBar', ProgressBar, false],\n  ['Search', Search, true],\n  ['SparkLine', SparkLine, false],\n  ['Table', Table, false],\n  ['TextWithButton', TextWithButton, false],\n  ['TreeChart', TreeChart, true],\n];\nconst Component = () => (\n  <Components>\n    {components\n      .sort((a, b) => (a[0] < b[0] ? -1 : 1))\n      .map(([title, C, big]) => (\n        <>\n          {title}\n          <Base key={title} data-big={big}>\n            <C />\n          </Base>\n        </>\n      ))}\n  </Components>\n);\nconst base: Meta = {\n  title: 'UI/All',\n  component: Component,\n};\n\nconst Template: StoryFn = (args) => <Component {...args} />;\n\nexport const Primary: StoryFn = Template.bind({});\n\nexport default base;\n","'use client';\nimport styled from '@emotion/styled';\nimport React, { useState } from 'react';\n\nimport { Chevron } from '../Chevron';\n\nconst SBase = styled.div``;\nconst SSubTitle = styled.div`\n  font-size: 1rem;\n  font-weight: bold;\n  text-align: center;\n  margin-right: 0.5rem;\n`;\n\nconst SRollUpRow = styled.div`\n  display: flex;\n  cursor: pointer;\n`;\nexport interface IAccordion {\n  children: string | React.ReactNode;\n  title: string;\n  /** controlled component if provided */\n  open?: boolean;\n  /** called when openness changes */\n  setOpen?: (open: boolean) => void;\n  chevronColour?: string;\n  className?: string;\n}\n\nexport const Accordion = ({\n  title,\n  children,\n  open,\n  setOpen,\n  chevronColour = 'white',\n  className,\n}: IAccordion) => {\n  const [openSt, setOpenSt] = useState(false);\n  const controlled = open !== undefined;\n\n  return (\n    <SBase className={className}>\n      <SRollUpRow\n        onClick={() => {\n          setOpen?.(controlled ? !open : !openSt);\n          if (!controlled) {\n            setOpenSt(!openSt);\n          }\n        }}\n      >\n        <SSubTitle>{title}</SSubTitle>\n        <Chevron point={openSt ? 'up' : 'down'} colour={chevronColour} />\n      </SRollUpRow>\n\n      {(controlled ? open : openSt) && children}\n    </SBase>\n  );\n};\n","'use client';\nimport { css } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport type { CSSProperties } from 'react';\nimport React from 'react';\n\nimport { removeUndefValuesFromObject } from '../../../common/helpers/object';\nimport { colours } from '../../styles/colours';\n\nconst BGcss = css`\n  max-height: calc(100% - 6px);\n  display: flex;\n  border: 0;\n  padding: 3px;\n  background-image:\n    linear-gradient(white, white),\n    linear-gradient(to bottom right, var(--left), var(--right));\n  background-origin: border-box;\n  background-clip: content-box, border-box;\n  overflow: hidden;\n  &[data-ccnd='true'] {\n    &:hover {\n      filter: saturate(3);\n    }\n  }\n`;\n\nconst BGLink = styled.div`\n  ${BGcss};\n`;\n\nconst BGALink = styled.a`\n  ${BGcss};\n`;\n\nconst Padding = styled.div`\n  justify-content: center;\n  align-items: center;\n  display: flex;\n  flex-flow: column;\n  border: 0;\n  flex-grow: 1;\n`;\n\nconst FeatureBoxFill = styled(Padding)`\n  background-image: linear-gradient(to bottom right, var(--left), var(--right));\n  color: ${colours.mainLight};\n  flex-grow: 1;\n`;\ntype IOnClick =\n  | React.MouseEvent<HTMLDivElement, MouseEvent>\n  | React.MouseEvent<HTMLAnchorElement, MouseEvent>;\n\nexport interface IBorderGradient {\n  canClick?: boolean;\n  noGrow?: boolean;\n  className?: string;\n  fill?: boolean;\n  /** default 2rem */\n  radius?: string;\n  left?: string;\n  right?: string;\n  children: React.ReactNode;\n  padding?: string;\n  onClick?: (e: IOnClick) => void;\n  href?: string;\n  target?: string;\n  rel?: string;\n  disabled?: boolean;\n}\nexport const BorderGradient = ({\n  left = colours.orange,\n  right = colours.orangeRed,\n  children,\n  radius = '2rem',\n  fill = false,\n  padding = '2rem',\n  className,\n  onClick,\n  href,\n  target,\n  rel,\n  noGrow = false,\n  disabled = false,\n  canClick = false,\n}: IBorderGradient) => {\n  const CCND = canClick && !disabled;\n  const style: CSSProperties = removeUndefValuesFromObject({\n    flexGrow: noGrow ? 0 : 1,\n    '--left': left,\n    '--right': right,\n    borderRadius: radius,\n    filter: !disabled ? null : 'grayscale(1)',\n    cursor: CCND ? 'pointer' : 'default',\n  });\n\n  const props = {\n    onClick: (e: IOnClick) => !disabled && onClick && onClick(e),\n    className,\n    href,\n    target,\n    rel,\n    canClick: !!onClick || canClick,\n    style,\n    'data-ccnd': CCND,\n  };\n\n  const child = (\n    <>\n      {!fill && <Padding style={{ padding }}>{children}</Padding>}\n      {fill && <FeatureBoxFill style={{ padding }}>{children}</FeatureBoxFill>}\n    </>\n  );\n\n  if (href) {\n    return <BGALink {...props}>{child}</BGALink>;\n  }\n  return <BGLink {...props}>{child}</BGLink>;\n};\n","'use client';\n\nimport { css } from '@emotion/react';\nimport type { StyledComponent } from '@emotion/styled';\nimport styled from '@emotion/styled';\nimport type { JSX, KeyboardEventHandler, MouseEventHandler } from 'react';\nimport React from 'react';\n\nimport { colours } from '../../styles/colours';\n\nexport const ButtonBase = css`\n  text-decoration: none;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border: 0;\n  font-weight: bold;\n  font-family: inherit;\n  font-size: 1.2rem;\n  border-radius: 0.5rem;\n  cursor: pointer;\n  height: 3rem;\n  line-height: 1rem;\n  &:hover {\n    filter: saturate(1.5);\n  }\n  padding-left: 1rem;\n  padding-right: 1rem;\n  color: white;\n\n  &[data-disabled='true'] {\n    cursor: default !important;\n    background-color: #888 !important;\n  }\n\n  &[data-theme='green'] {\n    background-color: ${colours.darkGreen};\n    &[data-invert='true'] {\n      color: ${colours.darkGreen};\n      background-color: white;\n      border: solid 1px ${colours.darkGreen};\n    }\n  }\n\n  &[data-theme='red'] {\n    background-color: ${colours.orangeRed};\n    &[data-invert='true'] {\n      color: ${colours.orangeRed};\n      background-color: white;\n      border: solid 1px ${colours.orangeRed};\n    }\n  }\n`;\n\nconst BaseButton = styled.button`\n  ${ButtonBase}\n`;\n\nconst BaseA = styled.a`\n  ${ButtonBase}\n`;\n\nexport interface IButton {\n  title?: string;\n  invert?: boolean;\n  disabled?: boolean;\n  className?: string;\n  onClick?: MouseEventHandler<HTMLButtonElement>;\n  onKeyDown?: KeyboardEventHandler<HTMLButtonElement>;\n  children: string | JSX.Element;\n  href?: string;\n  colourTheme?: 'green' | 'red';\n}\nexport const Button = (props: IButton) => {\n  const Component: StyledComponent<'button', any> = props.href\n    ? (BaseA as any)\n    : BaseButton;\n\n  return (\n    <Component\n      className={props.className}\n      data-invert={props.invert}\n      data-disabled={props.disabled ?? false}\n      role=\"button\"\n      title={props.title || undefined}\n      data-theme={props.colourTheme ?? 'green'}\n      {...props}\n    >\n      {props.children}\n    </Component>\n  );\n};\n","'use client';\nimport styled from '@emotion/styled';\nimport React from 'react';\n\nimport { ChevronRight } from '../../icons/ChevronRight';\nimport { Icon } from '../Icon';\n\nconst Base = styled.span`\n  font-size: 2rem;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst IconStyled = styled(Icon)`\n  cursor: pointer;\n  margin: 0;\n  padding: 0;\n`;\nexport interface IChevron {\n  /**\n   * default right\n   */\n  point: 'up' | 'down' | 'left' | 'right';\n  colour?: string;\n  className?: string;\n  width?: string;\n  onToggle?: () => void;\n}\n\nexport const Chevron = ({\n  width = '1.2rem',\n  className,\n  colour = 'black',\n  onToggle,\n  point = 'right',\n}: IChevron) => {\n  let rotate = 0;\n  switch (point) {\n    case 'down': {\n      rotate = 90;\n      break;\n    }\n\n    case 'left': {\n      rotate = 180;\n      break;\n    }\n\n    case 'up': {\n      rotate = 270;\n      break;\n    }\n\n    case 'right': {\n      rotate = 0;\n    }\n  }\n\n  return (\n    <Base\n      className={className}\n      onClick={() => onToggle?.()}\n      onTouchStart={() => onToggle?.()}\n      onKeyDown={(e) => e.key === 'Enter' && onToggle?.()}\n    >\n      <IconStyled\n        rotate={rotate}\n        style={{ width, height: width, fill: colour }}\n      >\n        {ChevronRight}\n      </IconStyled>\n    </Base>\n  );\n};\n","'use client';\nimport styled from '@emotion/styled';\nimport React from 'react';\n\nimport { filterDataProps } from '../../helpers/dom';\n\nconst Base = styled.div`\n  position: absolute;\n  z-index: 1;\n  width: 32px;\n  height: 32px;\n  opacity: 0.3;\n  cursor: pointer;\n  background-color: white;\n  top: 0;\n  right: 0;\n  &:hover {\n    opacity: 1;\n  }\n  &:before,\n  &:after {\n    position: absolute;\n    left: 15px;\n    content: ' ';\n    height: 33px;\n    width: 2px;\n    background-color: #333;\n  }\n  &:before {\n    transform: rotate(45deg);\n  }\n  &:after {\n    transform: rotate(-45deg);\n  }\n`;\nexport interface IClose {\n  onClick?: (ev: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n  className?: string;\n}\nexport const Close = (p: IClose) => (\n  <Base\n    {...filterDataProps(p)}\n    className={p.className}\n    onClick={(e) => p.onClick?.(e)}\n  />\n);\n","'use client';\nimport styled from '@emotion/styled';\nimport React, { useEffect, useState } from 'react';\n\nimport { colours } from '../../styles';\n\nconst Base = styled.div`\n  position: relative;\n  min-width: 5rem;\n  width: 100%;\n  height: 2rem;\n  border-radius: 1rem;\n  overflow: hidden;\n`;\n\nconst Bar = styled.div`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n`;\n\nconst Dot = styled.div`\n  position: absolute;\n  top: calc(50% - 0.25rem);\n  width: 0.5rem;\n  height: 0.5rem;\n  background-color: #aaa;\n  z-index: 1;\n  border-radius: 50%;\n  &[data-invert='true'] {\n    background-color: #333;\n  }\n`;\n\nexport interface IProgressBar {\n  min: number;\n  max: number;\n  /** default #4d76ff */\n  frontColour?: string;\n  /** default #eee */\n  backColour?: string;\n  /** default 25,50,75 */\n  dotPercentages?: number[] | null;\n  className?: string;\n  /** if true, will transition to the end in X ms */\n  transitionToMs?: number;\n}\n\nexport const ProgressBar = (p: IProgressBar) => {\n  const {\n    transitionToMs = 200,\n    frontColour = colours.notificationBlue,\n    backColour = '#eee',\n    dotPercentages = [25, 50, 75],\n  } = p;\n\n  const [barWidth, setBarWidth] = useState((p.min / p.max) * 100);\n  useEffect(() => {\n    const newbw = (p.min / p.max) * 100;\n    if (barWidth !== newbw) {\n      setBarWidth(newbw);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [p.min, p.max]);\n\n  useEffect(() => {\n    if (transitionToMs) {\n      setBarWidth(p.max);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <Base\n      style={{\n        backgroundColor: backColour,\n      }}\n      className={p.className}\n    >\n      <Bar\n        style={{\n          width: `${barWidth}%`,\n          backgroundColor: frontColour,\n          transition: `width ${transitionToMs}ms linear`,\n        }}\n      />\n      {dotPercentages?.map((v) => (\n        <Dot\n          key={v}\n          style={{ left: `calc(${v}% - 0.25rem)` }}\n          data-invert={v > barWidth}\n        />\n      ))}\n    </Base>\n  );\n};\n","'use client';\nimport styled from '@emotion/styled';\nimport React from 'react';\n\nimport { distinctBy } from '../../../common/helpers/array';\nimport { rangePercentage } from '../../../common/helpers/math';\n\nconst barWidth = 2;\nconst Base = styled.div`\n  width: calc(100% - 1px);\n  height: calc(100% - 1px);\n  border: solid 1px #666;\n  padding: 0;\n  display: flex;\n  justify-content: center;\n  align-items: flex-end;\n  overflow: hidden;\n`;\n\nconst Points = styled.div`\n  position: relative;\n  width: calc(100% - ${barWidth}px);\n  height: calc(100% - ${barWidth}px);\n  margin-left: ${barWidth}px;\n`;\n\nconst Point = styled.div`\n  position: absolute;\n  width: ${barWidth}px;\n`;\n\nexport interface ISparkLine {\n  /**\n   * default #4d76ff\n   */\n  pointColour?: string;\n  className?: string;\n  data: TSparkLineData[];\n  pointTitleF?: (p: TSparkLineData) => string;\n  title?: string;\n}\nexport type TSparkLineData = { x: number; y: number };\nexport const SparkLine = (p: ISparkLine) => {\n  const { data: raw, pointColour = '#4d76ff' } = p;\n  const xMin = Math.min(...raw.map((d) => d.x));\n  const xMax = Math.max(...raw.map((d) => d.x));\n  const yMin = Math.min(...raw.map((d) => d.y));\n  const yMax = Math.max(...raw.map((d) => d.y));\n  const data = distinctBy(\n    raw.map((orig) => ({\n      x:\n        rangePercentage({\n          value: orig.x,\n          min: xMin,\n          max: xMax,\n        }) * 100,\n      y:\n        rangePercentage({\n          value: orig.y,\n          min: yMin,\n          max: yMax,\n        }) * 100,\n      orig,\n    })),\n    (s) => s.x,\n  );\n\n  return (\n    <Base className={p.className} title={p.title}>\n      <Points>\n        {data.map((pt) => (\n          <Point\n            title={p.pointTitleF?.(pt.orig) ?? ''}\n            key={pt.x + ' ' + pt.y}\n            style={{\n              backgroundColor: pointColour,\n              borderColor: pointColour,\n              left: `calc(${pt.x}% - ${barWidth}px)`,\n              bottom: 0,\n              height: `calc(${pt.y}% + ${barWidth}px)`,\n            }}\n          />\n        ))}\n      </Points>\n    </Base>\n  );\n};\n","'use client';\nimport styled from '@emotion/styled';\nimport type { JSX } from 'react';\nimport React from 'react';\n\nimport { groupByList } from '../../../common/helpers/groupBy';\n\nconst Base = styled.div`\n  display: flex;\n  flex-flow: column;\n  width: 100%;\n  max-height: 100%;\n  overflow-y: auto;\n`;\n\nconst TableRow = styled.div`\n  display: flex;\n  border: solid 1px #ccc;\n  &[data-header='true'] {\n    border-bottom: solid 1px #888;\n  }\n  &:not(:first-of-type) {\n    border-top: 0;\n  }\n`;\n\nconst Group = styled.div`\n  display: flex;\n  flex-flow: column;\n  width: 100%;\n`;\n\nconst GroupTitle = styled.div`\n  font-size: 1.5rem;\n`;\n\nconst GroupWrap = styled.div`\n  display: flex;\n  flex-flow: column;\n  width: 100%;\n`;\n\nexport interface ITableItem {\n  content: JSX.Element;\n  groupTitle?: string;\n}\n\nexport interface ITable {\n  children: ITableItem[];\n  className?: string;\n  headerRow?: JSX.Element;\n}\nexport const Table = ({ children, className, headerRow }: ITable) => {\n  const grouped = groupByList(children, (s) => s.groupTitle);\n\n  return (\n    <Base className={className}>\n      {grouped.map((group) => (\n        <GroupWrap key={'gk' + group.key}>\n          {group.key && (\n            <GroupTitle key={`gt${group.key}`}>{group.key}</GroupTitle>\n          )}\n          <Group key={`g${group.key}`}>\n            {headerRow && (\n              <TableRow data-header=\"true\" key={`headrow${group.key}`}>\n                {headerRow}\n              </TableRow>\n            )}\n            {group.items.map((item) => (\n              <TableRow key={item.content.key}>{item.content}</TableRow>\n            ))}\n          </Group>\n        </GroupWrap>\n      ))}\n    </Base>\n  );\n};\n","'use client';\nimport styled from '@emotion/styled';\nimport React, { useState } from 'react';\n\nconst Base = styled.div`\n  display: flex;\n  flex-flow: row;\n  max-height: 100%;\n`;\n\nconst Input = styled.input`\n  flex-grow: 1;\n  border: solid 3px #ccc;\n  border-right: 0;\n  padding-left: 0.5rem;\n  border-radius: 0.5rem 0 0 0.5rem;\n  overflow: hidden;\n  font-size: 1.2rem;\n  &[data-valid='false'] {\n    border-color: indianred;\n  }\n  outline: 0;\n`;\n\nconst Button = styled.button`\n  padding: 2rem;\n  padding-top: 1rem;\n  padding-bottom: 1rem;\n  border: 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: rgb(136 119 227);\n  color: white;\n  font-weight: bold;\n  border-radius: 0 0.5rem 0.5rem 0;\n  overflow: hidden;\n  user-select: none;\n  cursor: pointer;\n  &[data-valid='false'] {\n    cursor: not-allowed;\n    border-color: indianred;\n    background-color: #ccc;\n  }\n`;\nexport interface ITextWithButton {\n  /** default \"Submit\" */\n  submitText?: string;\n  placeholder?: string;\n  /** if provided will validate and block submission accordingly */\n  validateF?: (s: string) => boolean;\n  onSubmit: (s: string) => void;\n}\n\nexport const TextWithButton = ({\n  submitText = 'Submit',\n  placeholder,\n  validateF,\n  onSubmit,\n}: ITextWithButton) => {\n  const [value, setValue] = useState('');\n  const valid = !validateF ? true : validateF(value);\n\n  return (\n    <Base>\n      <Input\n        data-type=\"input\"\n        data-valid={valid}\n        placeholder={placeholder}\n        value={value}\n        onChange={(s) => setValue(s.target.value)}\n        onKeyDown={(e) => e.key === 'Enter' && valid && onSubmit(value)}\n      />\n      <Button\n        data-type=\"button\"\n        data-valid={valid}\n        disabled={!valid}\n        onClick={() => valid && onSubmit(value)}\n      >\n        {submitText}\n      </Button>\n    </Base>\n  );\n};\n"],"names":[],"sourceRoot":""}
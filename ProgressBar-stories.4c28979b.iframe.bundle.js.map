{"version":3,"file":"ProgressBar-stories.4c28979b.iframe.bundle.js","mappings":";;;;;;;;AAeA;;;;;AAOA;;;;;;;;;;;AA2BA;ACrCA;AAGA;;;;;;AAoBA;;AAGA;;;;AAMA;;;;;;AAwBA;;;AAyBA;;;;;;;;AAZA;AAYA;;;;;;;;;;;;;;;;;;;;;;AChEA;;;AAKA;;;AAKA;;AAIA;;;;;AAKA;;;AAKA","sources":["webpack://ag-common/./src/ui/components/ProgressBar/index.tsx","webpack://ag-common/./src/ui/styles/common.tsx","webpack://ag-common/./src/ui/styles/standaloneStyles.ts"],"sourcesContent":["'use client';\nimport styled from '@emotion/styled';\nimport React, { useEffect, useState } from 'react';\n\nimport { colours } from '../../styles';\n\nconst Base = styled.div`\n  position: relative;\n  min-width: 5rem;\n  width: 100%;\n  height: 2rem;\n  border-radius: 1rem;\n  overflow: hidden;\n`;\n\nconst Bar = styled.div`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n`;\n\nconst Dot = styled.div`\n  position: absolute;\n  top: calc(50% - 0.25rem);\n  width: 0.5rem;\n  height: 0.5rem;\n  background-color: #aaa;\n  z-index: 1;\n  border-radius: 50%;\n  &[data-invert='true'] {\n    background-color: #333;\n  }\n`;\n\nexport interface IProgressBar {\n  min: number;\n  max: number;\n  /** default #4d76ff */\n  frontColour?: string;\n  /** default #eee */\n  backColour?: string;\n  /** default 25,50,75 */\n  dotPercentages?: number[] | null;\n  className?: string;\n  /** if true, will transition to the end in X ms */\n  transitionToMs?: number;\n}\n\nexport const ProgressBar = (p: IProgressBar) => {\n  const {\n    transitionToMs = 200,\n    frontColour = colours.notificationBlue,\n    backColour = '#eee',\n    dotPercentages = [25, 50, 75],\n  } = p;\n\n  const [barWidth, setBarWidth] = useState((p.min / p.max) * 100);\n  useEffect(() => {\n    const newbw = (p.min / p.max) * 100;\n    if (barWidth !== newbw) {\n      setBarWidth(newbw);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [p.min, p.max]);\n\n  useEffect(() => {\n    if (transitionToMs) {\n      setBarWidth(p.max);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <Base\n      style={{\n        backgroundColor: backColour,\n      }}\n      className={p.className}\n    >\n      <Bar\n        style={{\n          width: `${barWidth}%`,\n          backgroundColor: frontColour,\n          transition: `width ${transitionToMs}ms linear`,\n        }}\n      />\n      {dotPercentages?.map((v) => (\n        <Dot\n          key={v}\n          style={{ left: `calc(${v}% - 0.25rem)` }}\n          data-invert={v > barWidth}\n        />\n      ))}\n    </Base>\n  );\n};\n","'use client';\nimport { css } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport type { CSSProperties } from 'react';\n\nimport { colours } from './colours';\n\n/** function that returns css that gives a text outline drop shadow.\n * @param outlineColour default='white'\n * @param sizePx default = 1px\n */\nexport const HardOutline = (outlineColour = 'white', sizePx = 1) => css`\\\nfilter: ${HardOutlineFilter(outlineColour, sizePx)};\n`;\n\nexport const HardOutlineFilter = (outlineColour = 'white', sizePx = 1) => {\n  const px = `${sizePx}px`;\n\n  return `drop-shadow(${px} ${px} 0px ${outlineColour})\n  drop-shadow(-${px} ${px} 0px ${outlineColour})\n  drop-shadow(${px} -${px} 0px ${outlineColour})\n  drop-shadow(-${px} -${px} 0px ${outlineColour})`;\n};\n\n/** disable user text selection */\nexport const NoTextSelect = css`\n  user-select: none; /* supported by Chrome and Opera */\n  -webkit-user-select: none; /* Safari */\n  -khtml-user-select: none; /* Konqueror HTML */\n  -moz-user-select: none; /* Firefox */\n  -ms-user-select: none; /* Internet Explorer/Edge */\n`;\n\n/** enable text overflow\n * @param lines number of lines before overflow\n */\nexport const TextOverflowEllipsis = (lines: number) => css`\n  display: -webkit-box;\n  -webkit-line-clamp: ${lines};\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\n/** stop dragging of element */\nexport const noDrag: {\n  draggable: boolean;\n  onDragStart: React.DragEventHandler<HTMLDivElement>;\n  onTouchStart: React.TouchEventHandler<HTMLDivElement>;\n} = {\n  draggable: false,\n  onDragStart: (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n  },\n  onTouchStart: (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n  },\n};\n\n/** apply bounce effect given a condition */\nexport const bounce = (bounceattr: string) => css`\n  transition:\n    opacity 0.2s ease,\n    transform 0.2s cubic-bezier(0.02, 1.5, 0.74, 1.23);\n  transform-origin: 50% 50%;\n  transform: translateY(-5px);\n  &[${bounceattr}='true'] {\n    transform: translateY(0);\n  }\n`;\n\nexport const Card = styled.div`\n  background-color: white;\n  margin: 0.5rem;\n\n  position: relative;\n  border-radius: 0.5rem;\n  max-width: 40rem;\n  padding: 1rem;\n  border: solid 2px ${colours.lighter};\n`;\n\nexport interface IVarStyles {\n  /** default var(--main-fg) */\n  color: string;\n  /** default var(--main-bg) */\n  backgroundColor: string;\n  /** default var(--main-bg-mid) */\n  borderColor: string;\n}\n\nexport const getVarStyles = (\n  raw?: Partial<IVarStyles & CSSProperties>,\n): IVarStyles => ({\n  ...raw,\n  color: raw?.color ?? 'var(--main-fg)',\n  backgroundColor: raw?.backgroundColor ?? 'var(--main-bg)',\n  borderColor: raw?.borderColor ?? 'var(--main-bg-mid)',\n});\n","'use client';\nimport styled from '@emotion/styled';\n\nimport { smallScreen } from './media';\n\nexport const SOBase = styled.div`\n  display: flex;\n  width: 100%;\n  flex-grow: 1;\n  flex-flow: column;\n  overflow: hidden;\n  align-content: flex-start;\n  align-items: flex-start;\n\n  > h1,\n  h2,\n  > p {\n    white-space: pre-wrap;\n    font-size: 1.2rem;\n  }\n  h1,\n  h2 {\n    font-weight: normal;\n    font-size: 2rem;\n    flex-basis: 100%;\n    margin: 0;\n  }\n`;\n\nexport const SOBR = styled.div`\n  height: 0.5rem;\n  width: 0.5rem;\n`;\n\nexport const SOB = styled.div`\n  font-size: 1.4em;\n  font-weight: bold;\n`;\n\nexport const SOP = styled.div`\n  margin-bottom: 1rem;\n`;\n\nexport const SOCenter = styled.div`\n  display: flex;\n  flex-flow: column;\n  margin-left: auto;\n  margin-right: auto;\n  @media ${smallScreen} {\n    width: calc(100% - 2rem);\n  }\n`;\n\nexport const SOA = styled.a`\n  width: fit-content;\n  color: rgb(125, 171, 255);\n  text-decoration: none;\n  &:hover {\n    text-decoration: underline;\n  }\n  &[data-inline='true'] {\n    display: inline-block;\n    margin-left: 5px;\n    margin-right: 5px;\n  }\n  &[data-inline='false'] {\n    display: flex;\n    margin: auto;\n  }\n`;\n"],"names":[],"sourceRoot":""}
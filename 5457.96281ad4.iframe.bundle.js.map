{"version":3,"file":"5457.96281ad4.iframe.bundle.js","mappings":";;;;;;AAYA;;AAIA;;;;ACGA;;;;AAKA;;;;;;;;;;;;;;;AAiBA;;;AAGA;AACA;;;AAKA;;;ACvBA","sources":["webpack://ag-common/./src/ui/components/TreeChart/TooltipContent.tsx","webpack://ag-common/./src/ui/components/TreeChart/base.tsx","webpack://ag-common/./src/ui/helpers/useTooltip.tsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport React from 'react';\n\nimport type { TreeNodeData, TreeNodeOut } from './types';\n\nconst Base = styled.div`\n  padding: 0.5rem;\n  border: solid 1px black;\n  background-color: white;\n  color: black;\n`;\n\nconst Title = styled.div`\n  font-weight: bold;\n`;\n\nexport const TooltipContent = ({\n  data,\n  node,\n  head,\n}: {\n  data: TreeNodeData;\n  node: TreeNodeOut;\n  head: TreeNodeOut;\n}) => {\n  let rows: string[] = [];\n\n  let n: TreeNodeOut | undefined = node;\n  while (n) {\n    const t =\n      data.titleFn?.({\n        path: n.name,\n        pathCount: n.size,\n        fullCount: head.size,\n      }) || `${n.name} (${n.size}/${head.size})`;\n    rows = [t, ...rows];\n    n = n.parent;\n  }\n\n  return (\n    <Base>\n      <Title>\n        {rows.map((r, i) => (\n          <div key={r} style={{ marginLeft: `${i * 2}px` }}>\n            {r}\n          </div>\n        ))}\n      </Title>\n    </Base>\n  );\n};\n","'use client';\nimport styled from '@emotion/styled';\nimport React, { useEffect, useRef, useState } from 'react';\n\nimport { useResize } from '../../helpers/useResize';\nimport type { IUseTooltip } from '../../helpers/useTooltip';\nimport { useTooltip } from '../../helpers/useTooltip';\nimport { getColourWheel } from '../../styles';\nimport { HardOutline, TextOverflowEllipsis } from '../../styles/common';\nimport { convertToRaw } from './helpers';\nimport { TooltipContent } from './TooltipContent';\nimport type { TreeNodeData, TreeNodeOut } from './types';\n\nconst Base = styled.div`\n  border: solid 1px #ccc;\n  max-height: 100%;\n  overflow-y: auto;\n`;\n\nconst NodeChildren = styled.div`\n  display: flex;\n  flex-flow: row wrap;\n  justify-content: center;\n`;\nconst Node = styled.div`\n  margin: 1px;\n  padding: 2px;\n  display: flex;\n  flex-flow: column;\n  height: min-content;\n  overflow: hidden;\n  &[data-leaf='true'] {\n    width: 100%;\n    height: 100%;\n    min-height: 1rem;\n    min-width: 1rem;\n    max-width: 10rem;\n    max-height: 10rem;\n  }\n`;\n\nconst Title = styled.div`\n  color: white;\n  word-break: break-all;\n  ${HardOutline('black')};\n  ${TextOverflowEllipsis(1)};\n  min-height: 1rem;\n  line-height: 1rem;\n`;\n\nconst Render = ({\n  n,\n  depth,\n  head,\n  headDim,\n  tnd,\n  UT,\n}: {\n  tnd: TreeNodeData;\n  n: TreeNodeOut;\n  depth: number;\n  head: TreeNodeOut;\n  headDim: { width: number; height: number };\n  UT: IUseTooltip<ITreeChartUTData>;\n}) => {\n  const children = Object.values(n.children);\n  const leaf = children.length === 0;\n  const sizeMult = n.size / head.size;\n\n  const biggerDim = Math.max(headDim.width, headDim.height);\n  const nodeSize = Math.floor(biggerDim * sizeMult).toString();\n\n  return (\n    <Node\n      data-treenode\n      data-leaf={leaf.toString()}\n      style={{\n        backgroundColor: getColourWheel(depth),\n        ...(leaf &&\n          nodeSize && {\n            width: nodeSize + 'px',\n            height: nodeSize + 'px',\n          }),\n      }}\n      key={n.name}\n      data-ch={n.children.length}\n      data-size={n.size}\n      onMouseLeave={() => UT.setPos(undefined)}\n      onMouseMove={(element) => {\n        UT.setPos({\n          element,\n          parent: null,\n          data: { data: tnd, node: n, head },\n        });\n        element.preventDefault();\n        element.stopPropagation();\n      }}\n    >\n      {n.name && <Title>{n.name}</Title>}\n      {children.length > 0 && (\n        <NodeChildren data-type=\"nc\">\n          {children.map((c) =>\n            Render({\n              UT,\n              n: c,\n              depth: depth + 1,\n              head,\n              headDim,\n              tnd,\n            }),\n          )}\n        </NodeChildren>\n      )}\n    </Node>\n  );\n};\n\ninterface ITreeChartUTData {\n  data: TreeNodeData;\n  node: TreeNodeOut;\n  head: TreeNodeOut;\n}\n\nexport const TreeChart = (tnd: TreeNodeData) => {\n  const UT = useTooltip<ITreeChartUTData>();\n  const head = convertToRaw({ tnd });\n\n  const pd = useResize();\n\n  const [headDim, setHeadDim] = useState<\n    { width: number; height: number } | undefined\n  >();\n\n  const r = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (!r.current) {\n      return;\n    }\n    const width = r.current.clientWidth;\n    const height = r.current.clientHeight || r.current.clientWidth;\n    setHeadDim({\n      width,\n      height,\n    });\n  }, [pd]);\n\n  if (head.size === 0) {\n    return <div />;\n  }\n\n  return (\n    <Base ref={r} className={tnd.className} style={tnd.style}>\n      <UT.Comp pos={UT.pos}>\n        {({ data }) => <TooltipContent {...data} />}\n      </UT.Comp>\n      {headDim &&\n        Render({\n          UT,\n          tnd,\n          n: head,\n          depth: 0,\n          head,\n          headDim,\n        })}\n    </Base>\n  );\n};\n","import styled from '@emotion/styled';\nimport type { MouseEvent } from 'react';\nimport type { JSX } from 'react';\nimport React, { createRef, useEffect, useState } from 'react';\nimport { createPortal } from 'react-dom';\n\nconst Base = styled.div`\n  position: absolute;\n  z-index: 10;\n`;\n\ninterface IPos<T> {\n  cursor: MouseEvent;\n  data: T;\n  portalId: string;\n  hasParent: boolean;\n  parentWidth: number;\n  parentHeight: number;\n  x: number;\n  y: number;\n}\n\ninterface IPosSize {\n  tooltipWidth: number;\n  tooltipHeight: number;\n}\n\nconst Comp = <T,>({\n  pos,\n  children,\n}: {\n  pos: IPos<T> | undefined;\n  children: (pos: IPos<T>, size?: IPosSize) => JSX.Element;\n}) => {\n  const ref = createRef<HTMLDivElement>();\n  const [size, setSize] = useState<IPosSize>();\n\n  useEffect(() => {\n    if (!ref.current || size) {\n      return;\n    }\n    const tooltipWidth = Math.max(\n      ref.current.clientWidth,\n      ref.current.scrollWidth,\n    );\n    const tooltipHeight = Math.max(\n      ref.current.clientHeight,\n      ref.current.scrollHeight,\n    );\n    if (tooltipHeight === 0 || tooltipWidth === 0) {\n      return;\n    }\n    setSize({\n      tooltipWidth,\n      tooltipHeight,\n    });\n  }, [ref, size]);\n\n  if (!pos) {\n    return null;\n  }\n\n  let left: number | undefined;\n  let right: number | undefined;\n  let top: number | undefined;\n  let bottom: number | undefined;\n  const gap = 5;\n  if (size) {\n    left = pos.x + gap;\n    const newRight = pos.parentWidth - pos.x + gap;\n\n    if (pos.x + gap + size.tooltipWidth > pos.parentWidth) {\n      left = undefined;\n      right = newRight;\n    }\n    //\n    top = pos.y + gap;\n\n    if (top + size.tooltipHeight > pos.parentHeight) {\n      if (pos.hasParent) {\n        top = undefined;\n      } else {\n        top = pos.parentHeight - size.tooltipHeight;\n      }\n\n      bottom = pos.parentHeight - pos.y;\n    }\n\n    if (right && right + size.tooltipWidth > pos.parentWidth) {\n      if (pos.hasParent) {\n        right = undefined;\n      }\n      left = 0;\n    }\n\n    if (bottom && bottom + size.tooltipHeight > pos.parentHeight) {\n      if (pos.hasParent) {\n        bottom = undefined;\n      }\n      top = 0;\n    }\n  }\n\n  const Content = (\n    <Base\n      data-type=\"tooltip-content\"\n      ref={ref}\n      style={{\n        left,\n        right,\n        top,\n        bottom,\n        ...(!pos.hasParent && { position: 'fixed' }),\n        ...(!size && { zIndex: -1 }),\n      }}\n    >\n      {children(pos, size)}\n    </Base>\n  );\n  const e = document.querySelector(`#${pos.portalId}`) as Element | undefined;\n  if (!pos.hasParent && e) {\n    return createPortal(Content, e);\n  }\n  return Content;\n};\n\ntype ITooltipProps = {\n  /** default 'ag-tooltip-portal' */\n  portalId: string;\n};\n\nexport interface IUseTooltip<T> {\n  Comp: <T>({\n    pos,\n    children,\n  }: {\n    pos: IPos<T> | undefined;\n    children: (pos: IPos<T>, size?: IPosSize) => JSX.Element;\n  }) => JSX.Element | null;\n  setPos: (\n    p?:\n      | {\n          element: MouseEvent;\n          parent: Element | null;\n          data: T;\n        }\n      | undefined,\n  ) => void;\n  pos: IPos<T> | undefined;\n}\n\nexport const useTooltip = <T,>(p?: ITooltipProps): IUseTooltip<T> => {\n  const portalId = p?.portalId || 'ag-tooltip-portal';\n  const [pos, setPosRaw] = useState<IPos<T>>();\n\n  useEffect(() => {\n    if (document.querySelectorAll(`#${portalId}`).length > 0) {\n      return;\n    }\n    const d = document.createElement('div');\n    d.id = portalId;\n    document.body.appendChild(d);\n    return () => {\n      try {\n        document.querySelector(`#${portalId}`)?.remove();\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      } catch (e) {\n        //\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const setPos = (p?: {\n    element: MouseEvent;\n    parent: Element | null;\n    data: T;\n  }) => {\n    if (!p) {\n      setPosRaw(undefined);\n      return;\n    }\n\n    let parentTop = 0;\n    let parentLeft = 0;\n    let parentWidth = document.body.clientWidth;\n    let parentHeight = document.body.clientHeight;\n    let x = 0;\n    let y = 0;\n\n    if (p.parent) {\n      ({\n        top: parentTop,\n        left: parentLeft,\n        width: parentWidth,\n        height: parentHeight,\n      } = p.parent.getBoundingClientRect());\n      x = p.element.pageX - parentLeft;\n      y = p.element.pageY - parentTop;\n    } else {\n      parentWidth = window.innerWidth;\n      parentHeight = window.innerHeight;\n      x = p.element.clientX;\n      y = p.element.clientY;\n    }\n\n    const p2 = {\n      cursor: p.element,\n      data: p.data,\n      parentWidth,\n      parentHeight,\n      x,\n      y,\n      hasParent: !!p.parent,\n      portalId,\n    };\n\n    setPosRaw(p2);\n  };\n\n  return {\n    Comp,\n    setPos,\n    pos,\n  };\n};\n"],"names":[],"sourceRoot":""}
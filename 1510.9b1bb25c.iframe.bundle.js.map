{"version":3,"file":"1510.9b1bb25c.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AA8BA;;;;;;;;;;;;;;;;;;;ACHA;;;;;;;;;;;;;;AAgBA;AACA;AAGA;;;;;;;;AAQA;;AAGA;;;;ACtBA;;;;AC1BA;ACcA;;;AAIA;;;;AAIA;;;;;;;;;;;AAaA;AACA;;;;AAMA;AACA;AAGA;;AAIA;;;;;;;;;AAWA;;;;;;;AASA;ACpEA;AAGA;;;;;;AAoBA;;AAGA;;;;AAMA;;;;;;AAwBA;;;AAyBA;;;;;;;;AAZA;AAYA","sources":["webpack://ag-common/./src/ui/components/FlexRow/index.tsx","webpack://ag-common/./src/ui/components/TextEdit/common.ts","webpack://ag-common/./src/ui/components/TextEdit/CheckboxEdit.tsx","webpack://ag-common/./src/ui/components/TextEdit/LengthBox.tsx","webpack://ag-common/./src/ui/components/TextEdit/TextEdit.tsx","webpack://ag-common/./src/ui/styles/common.tsx"],"sourcesContent":["'use client';\nimport styled from '@emotion/styled';\nimport React from 'react';\n\nimport type { IFlexRow } from '../RowOrColumn';\n\nconst Base = styled.div`\n  position: relative;\n  display: flex;\n  flex-flow: row wrap;\n\n  &[data-nowrap='true'] {\n    flex-flow: row;\n  }\n\n  &[data-nogrow='true'] {\n    flex-grow: 0;\n  }\n  &[data-nogrow='false'] {\n    width: 100%;\n    height: 100%;\n    flex-grow: 1;\n  }\n\n  &[data-center='true'] {\n    justify-content: center;\n    align-items: center;\n  }\n`;\n\nexport const FlexRow = (props: IFlexRow) => (\n  <Base\n    data-nowrap={props.noWrap ?? false}\n    data-nogrow={props.noGrow ?? false}\n    data-center={props.center ?? false}\n    {...props}\n  >\n    {props.children}\n  </Base>\n);\n","'use client';\nimport { css } from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport { colours } from '../../styles/colours';\n\nexport const ValueBox = styled.div`\n  padding: 0.5rem;\n\n  display: flex;\n  position: relative;\n  align-items: center;\n  background-color: transparent;\n\n  justify-content: flex-start;\n  flex-grow: 1;\n  width: calc(100% - 1rem - 2px); //padding + border\n  border: solid 1px transparent;\n\n  &[data-pointer='true'] {\n    cursor: pointer;\n  }\n  &[data-nogrow='true'] {\n    flex-grow: 0;\n  }\n`;\n\nexport const valueCss = css`\n  width: 100%;\n  height: 100%;\n  padding: 0;\n  word-break: break-all;\n  font-size: inherit;\n  font-weight: inherit;\n  font-family: inherit;\n\n  &[data-type='checkbox'] {\n    cursor: pointer;\n    width: 1.5rem;\n    height: 1.5rem;\n  }\n`;\n\nexport const ValueInputCB = styled.input`\n  ${valueCss};\n`;\n\nexport const IconD = styled.div`\n  z-index: 1;\n  font-size: 1rem;\n  width: 1.5rem;\n  height: 1.5rem;\n  position: absolute;\n  cursor: pointer;\n  svg {\n    fill: ${colours.notificationBlue};\n  }\n`;\nexport const iconRight = { right: '0' };\nexport const iconLeft = { right: '1.5rem' };\n","'use client';\nimport styled from '@emotion/styled';\nimport React, { useEffect, useRef, useState } from 'react';\n\nimport { useOnClickOutside } from '../../helpers/useOnClickOutside';\nimport { Save } from '../../icons/Save';\nimport { Undo } from '../../icons/Undo';\nimport { noDrag } from '../../styles/common';\nimport { FlexRow } from '../FlexRow';\nimport {\n  IconD as Icon,\n  iconLeft,\n  iconRight,\n  ValueBox,\n  ValueInputCB,\n} from './common';\n\nconst Icons = styled(FlexRow)`\n  position: absolute;\n  top: 0;\n  right: -2rem;\n`;\n\nexport interface ICheckboxEdit {\n  className?: string;\n  defaultValue: boolean;\n  onSubmit: (val: boolean) => void;\n  noGrow?: boolean;\n  /**\n   * if true, will add undo button after changes. if false, will submit after every keypress. default false\n   */\n  allowUndo?: boolean;\n  /** display to right of CB */\n  rightSpan?: React.ReactNode;\n}\n\nexport const CheckboxEdit = ({\n  defaultValue,\n  onSubmit,\n  noGrow = false,\n  allowUndo = false,\n  rightSpan,\n  className,\n}: ICheckboxEdit) => {\n  const ref = useRef<HTMLDivElement>(null);\n  const [value, setValue] = useState(defaultValue);\n  useEffect(() => {\n    setValue(defaultValue);\n  }, [defaultValue]);\n  const valueChange = value !== defaultValue;\n  useOnClickOutside({ ref, moveMouseOutside: false }, () => {\n    if (valueChange) {\n      onSubmit(value);\n    }\n  });\n\n  return (\n    <ValueBox\n      {...noDrag}\n      className={className}\n      style={{ cursor: 'pointer', width: 'fit-content', flexGrow: 0 }}\n      ref={ref}\n      data-nogrow={noGrow}\n      onClick={(e) => {\n        if (allowUndo) {\n          setValue(!value);\n        } else {\n          onSubmit(!value);\n        }\n        e.stopPropagation();\n      }}\n    >\n      <ValueInputCB\n        type=\"checkbox\"\n        data-type=\"checkbox\"\n        checked={value}\n        onKeyDown={(e) => {\n          if (e.key === 'Enter' && value !== defaultValue) {\n            onSubmit(value);\n          }\n          e.stopPropagation();\n        }}\n        onChange={(e) => {\n          if (allowUndo) {\n            setValue(!value);\n          } else {\n            onSubmit(!value);\n          }\n          e.stopPropagation();\n        }}\n      />\n      {allowUndo && value !== defaultValue && (\n        <Icons center>\n          <Icon\n            style={iconLeft}\n            onClick={(e) => {\n              if (value !== defaultValue) {\n                onSubmit(value);\n              }\n              e.stopPropagation();\n            }}\n          >\n            <Save />\n          </Icon>\n          <Icon\n            style={{ ...iconRight, fill: '#134563' }}\n            onClick={(e) => {\n              setValue(defaultValue);\n              e.stopPropagation();\n            }}\n          >\n            <Undo />\n          </Icon>\n        </Icons>\n      )}\n      {!rightSpan ? '' : rightSpan}\n    </ValueBox>\n  );\n};\n","'use client';\nimport styled from '@emotion/styled';\nimport React from 'react';\n\nconst Base = styled.div`\n  /* position: absolute;\n  bottom: 0.5rem;\n  right: 0.5rem; */\n`;\n\nexport const TextEditLengthBox = ({\n  min,\n  max,\n}: {\n  min: number;\n  max: number;\n}) => {\n  let color = 'black';\n  if (min / max > 0.55) {\n    color = 'indianred';\n  }\n\n  if (min === max) {\n    color = 'red';\n  }\n  return (\n    <Base style={{ color }}>\n      {min}/{max}\n    </Base>\n  );\n};\n","'use client';\n\nimport { css } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport React, {\n  forwardRef,\n  useCallback,\n  useEffect,\n  useImperativeHandle,\n  useRef,\n  useState,\n} from 'react';\n\nimport { filterDataProps } from '../../helpers/dom';\nimport { useOnClickOutside } from '../../helpers/useOnClickOutside';\nimport { Pencil } from '../../icons/Pencil';\nimport { Save } from '../../icons/Save';\nimport { Undo } from '../../icons/Undo';\nimport { noDrag } from '../../styles/common';\nimport { iconLeft, iconRight, ValueBox, valueCss } from './common';\nimport { TextEditLengthBox } from './LengthBox';\nimport type { IRefTextEdit, ITextEdit } from './types';\n\nexport const ValueReadonly = styled.div`\n  ${valueCss};\n  word-break: break-word;\n  flex-basis: calc(100% - 3rem);\n`;\nconst basecss = css`\n  outline: none;\n  border: 0;\n  word-break: break-word;\n  ${valueCss};\n  resize: none;\n  overflow: hidden;\n  background-color: white;\n  color: black;\n  font-size: inherit;\n  font-weight: inherit;\n  font-family: inherit;\n  &::placeholder {\n    color: #bbb;\n  }\n`;\n\nconst ValueTextArea = styled.textarea`\n  ${basecss}\n  &[data-editing='true'] {\n    min-height: 5rem;\n  }\n`;\n\nconst ValueTextBox = styled.input`\n  ${basecss};\n`;\n\nconst ValueBoxEdit = styled(ValueBox)`\n  border: solid 1px #ccc;\n`;\n\nconst Right = styled.div`\n  display: flex;\n  flex-flow: row;\n  align-content: center;\n  &[data-singleline='false'] {\n    position: absolute;\n    bottom: 0.5rem;\n    right: 0.5rem;\n  }\n`;\n\nconst Icon = styled.div`\n  width: 1.5rem;\n  display: flex;\n  cursor: pointer;\n  &:hover {\n    filter: saturate(3);\n  }\n`;\n\nexport const TextEdit = forwardRef<IRefTextEdit, ITextEdit>((p, ref) => {\n  const {\n    defaultValue = '',\n    defaultEditing,\n    disableEdit = false,\n    singleLine = false,\n    noGrow = false,\n    allowUndo = true,\n  } = p;\n\n  const divRef = useRef<HTMLDivElement>(null);\n  const taref = useRef<HTMLTextAreaElement | HTMLInputElement>(null);\n  const [value, setValue] = useState(defaultValue);\n  const [editing, setEditingRaw] = useState(!!defaultEditing);\n  const valueChange = value !== defaultValue;\n  useImperativeHandle(ref, () => ({\n    setValue: (v) => {\n      if (v === value) {\n        return;\n      }\n      setValue(v);\n    },\n    focus: () => taref.current?.focus(),\n    getValue: () => taref.current?.value,\n  }));\n\n  useOnClickOutside(\n    {\n      disabled: p.onClickOutsideWithNoValue === null || disableEdit,\n      ref: divRef,\n      moveMouseOutside: false,\n    },\n    () => {\n      if (valueChange) {\n        p.onSubmit(value, false);\n        return;\n      }\n\n      if (!disableEdit && p.onClickOutsideWithNoValue) {\n        p.onClickOutsideWithNoValue();\n      }\n\n      if (!disableEdit && editing && defaultEditing) {\n        return;\n      }\n\n      if (editing) {\n        setEditingRaw(false);\n      }\n    },\n  );\n\n  const setEditing = useCallback(\n    (b: boolean) => {\n      setEditingRaw(b);\n      if (p.onEditingChange) {\n        p.onEditingChange(b);\n      }\n    },\n    [p],\n  );\n\n  useEffect(() => {\n    if (defaultEditing?.focus && taref.current) {\n      taref.current.focus();\n    }\n  }, [defaultEditing?.focus]);\n\n  if (!editing || disableEdit) {\n    return (\n      <ValueBox\n        {...noDrag}\n        className={p.className}\n        data-editing=\"false\"\n        onClick={() => p.onClickNotEditing?.()}\n        data-pointer={p.onClickNotEditing ? 'true' : 'false'}\n        data-nogrow={noGrow}\n        {...filterDataProps(p)}\n      >\n        {p.leftContent ?? null}\n        <ValueReadonly data-type=\"text\">\n          {value || <span style={{ color: '#ccc' }}>{p.placeholder}</span>}\n        </ValueReadonly>\n        <Right>\n          {!disableEdit && (\n            <Icon\n              style={iconRight}\n              onClick={(e) => {\n                e.stopPropagation();\n                setEditing(true);\n              }}\n            >\n              <Pencil />\n            </Icon>\n          )}\n        </Right>\n      </ValueBox>\n    );\n  }\n\n  const Comp = !singleLine ? ValueTextArea : ValueTextBox;\n\n  return (\n    <ValueBoxEdit\n      {...noDrag}\n      className={p.className}\n      data-editing=\"true\"\n      ref={ref as any}\n      tabIndex={-1}\n      data-nogrow={noGrow}\n      {...filterDataProps(p)}\n    >\n      {p.leftContent ?? null}\n      <Comp\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        tabIndex={editing ? 0 : undefined}\n        data-editing=\"true\"\n        data-valuechange={valueChange.toString()}\n        ref={taref as any}\n        data-type=\"text\"\n        value={value}\n        onChange={(v) => {\n          setValue(v.currentTarget.value);\n          if (!allowUndo) {\n            p.onSubmit(v.currentTarget.value, false);\n          }\n        }}\n        placeholder={p.placeholder}\n        rows={singleLine ? 1 : undefined}\n        maxLength={p.maxLength}\n        onKeyDown={(e: any) => {\n          if (p.onKeyDown?.(e) === false) {\n            e.preventDefault();\n            return;\n          }\n\n          if (singleLine && e.code.endsWith('Enter')) {\n            p.onSubmit(value, true);\n          }\n        }}\n      />\n\n      {p.maxLength && (\n        <Right data-singleline={singleLine}>\n          <TextEditLengthBox min={value.length} max={p.maxLength} />\n        </Right>\n      )}\n      {allowUndo && (\n        <Right>\n          {valueChange && (\n            <Icon style={iconLeft} onClick={() => p.onSubmit(value, false)}>\n              <Save />\n            </Icon>\n          )}\n          {(valueChange || editing !== !!defaultEditing) && (\n            <Icon\n              style={{ ...iconRight, fill: '#134563' }}\n              onClick={() => {\n                setEditing(!!defaultEditing);\n                setValue(defaultValue);\n              }}\n            >\n              <Undo />\n            </Icon>\n          )}\n        </Right>\n      )}\n    </ValueBoxEdit>\n  );\n});\n","'use client';\nimport { css } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport type { CSSProperties } from 'react';\n\nimport { colours } from './colours';\n\n/** function that returns css that gives a text outline drop shadow.\n * @param outlineColour default='white'\n * @param sizePx default = 1px\n */\nexport const HardOutline = (outlineColour = 'white', sizePx = 1) => css`\\\nfilter: ${HardOutlineFilter(outlineColour, sizePx)};\n`;\n\nexport const HardOutlineFilter = (outlineColour = 'white', sizePx = 1) => {\n  const px = `${sizePx}px`;\n\n  return `drop-shadow(${px} ${px} 0px ${outlineColour})\n  drop-shadow(-${px} ${px} 0px ${outlineColour})\n  drop-shadow(${px} -${px} 0px ${outlineColour})\n  drop-shadow(-${px} -${px} 0px ${outlineColour})`;\n};\n\n/** disable user text selection */\nexport const NoTextSelect = css`\n  user-select: none; /* supported by Chrome and Opera */\n  -webkit-user-select: none; /* Safari */\n  -khtml-user-select: none; /* Konqueror HTML */\n  -moz-user-select: none; /* Firefox */\n  -ms-user-select: none; /* Internet Explorer/Edge */\n`;\n\n/** enable text overflow\n * @param lines number of lines before overflow\n */\nexport const TextOverflowEllipsis = (lines: number) => css`\n  display: -webkit-box;\n  -webkit-line-clamp: ${lines};\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\n/** stop dragging of element */\nexport const noDrag: {\n  draggable: boolean;\n  onDragStart: React.DragEventHandler<HTMLDivElement>;\n  onTouchStart: React.TouchEventHandler<HTMLDivElement>;\n} = {\n  draggable: false,\n  onDragStart: (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n  },\n  onTouchStart: (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n  },\n};\n\n/** apply bounce effect given a condition */\nexport const bounce = (bounceattr: string) => css`\n  transition:\n    opacity 0.2s ease,\n    transform 0.2s cubic-bezier(0.02, 1.5, 0.74, 1.23);\n  transform-origin: 50% 50%;\n  transform: translateY(-5px);\n  &[${bounceattr}='true'] {\n    transform: translateY(0);\n  }\n`;\n\nexport const Card = styled.div`\n  background-color: white;\n  margin: 0.5rem;\n\n  position: relative;\n  border-radius: 0.5rem;\n  max-width: 40rem;\n  padding: 1rem;\n  border: solid 2px ${colours.lighter};\n`;\n\nexport interface IVarStyles {\n  /** default var(--main-fg) */\n  color: string;\n  /** default var(--main-bg) */\n  backgroundColor: string;\n  /** default var(--main-bg-mid) */\n  borderColor: string;\n}\n\nexport const getVarStyles = (\n  raw?: Partial<IVarStyles & CSSProperties>,\n): IVarStyles => ({\n  ...raw,\n  color: raw?.color ?? 'var(--main-fg)',\n  backgroundColor: raw?.backgroundColor ?? 'var(--main-bg)',\n  borderColor: raw?.borderColor ?? 'var(--main-bg-mid)',\n});\n"],"names":[],"sourceRoot":""}
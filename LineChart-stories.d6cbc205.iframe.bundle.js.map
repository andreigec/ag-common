{"version":3,"file":"LineChart-stories.d6cbc205.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AA8BA;;;ACHA;ACfA;AAGA;;;;;;AAoBA;;AAGA;;;;AAMA;;;;;;AAwBA;;;AAyBA;;;;;;;;AAZA;AAYA;;;;;;;;;;;;;;;;;;;;;;AChEA;;;AAKA;;;AAKA;;AAIA;;;;;AAKA;;;AAKA","sources":["webpack://ag-common/./src/ui/components/FlexRow/index.tsx","webpack://ag-common/./src/ui/helpers/useTooltip.tsx","webpack://ag-common/./src/ui/styles/common.tsx","webpack://ag-common/./src/ui/styles/standaloneStyles.ts"],"sourcesContent":["'use client';\nimport styled from '@emotion/styled';\nimport React from 'react';\n\nimport type { IFlexRow } from '../RowOrColumn';\n\nconst Base = styled.div`\n  position: relative;\n  display: flex;\n  flex-flow: row wrap;\n\n  &[data-nowrap='true'] {\n    flex-flow: row;\n  }\n\n  &[data-nogrow='true'] {\n    flex-grow: 0;\n  }\n  &[data-nogrow='false'] {\n    width: 100%;\n    height: 100%;\n    flex-grow: 1;\n  }\n\n  &[data-center='true'] {\n    justify-content: center;\n    align-items: center;\n  }\n`;\n\nexport const FlexRow = (props: IFlexRow) => (\n  <Base\n    data-nowrap={props.noWrap ?? false}\n    data-nogrow={props.noGrow ?? false}\n    data-center={props.center ?? false}\n    {...props}\n  >\n    {props.children}\n  </Base>\n);\n","import styled from '@emotion/styled';\nimport type { MouseEvent } from 'react';\nimport type { JSX } from 'react';\nimport React, { createRef, useEffect, useState } from 'react';\nimport { createPortal } from 'react-dom';\n\nconst Base = styled.div`\n  position: absolute;\n  z-index: 10;\n`;\n\ninterface IPos<T> {\n  cursor: MouseEvent;\n  data: T;\n  portalId: string;\n  hasParent: boolean;\n  parentWidth: number;\n  parentHeight: number;\n  x: number;\n  y: number;\n}\n\ninterface IPosSize {\n  tooltipWidth: number;\n  tooltipHeight: number;\n}\n\nconst Comp = <T,>({\n  pos,\n  children,\n}: {\n  pos: IPos<T> | undefined;\n  children: (pos: IPos<T>, size?: IPosSize) => JSX.Element;\n}) => {\n  const ref = createRef<HTMLDivElement>();\n  const [size, setSize] = useState<IPosSize>();\n\n  useEffect(() => {\n    if (!ref.current || size) {\n      return;\n    }\n    const tooltipWidth = Math.max(\n      ref.current.clientWidth,\n      ref.current.scrollWidth,\n    );\n    const tooltipHeight = Math.max(\n      ref.current.clientHeight,\n      ref.current.scrollHeight,\n    );\n    if (tooltipHeight === 0 || tooltipWidth === 0) {\n      return;\n    }\n    setSize({\n      tooltipWidth,\n      tooltipHeight,\n    });\n  }, [ref, size]);\n\n  if (!pos) {\n    return null;\n  }\n\n  let left: number | undefined;\n  let right: number | undefined;\n  let top: number | undefined;\n  let bottom: number | undefined;\n  const gap = 5;\n  if (size) {\n    left = pos.x + gap;\n    const newRight = pos.parentWidth - pos.x + gap;\n\n    if (pos.x + gap + size.tooltipWidth > pos.parentWidth) {\n      left = undefined;\n      right = newRight;\n    }\n    //\n    top = pos.y + gap;\n\n    if (top + size.tooltipHeight > pos.parentHeight) {\n      if (pos.hasParent) {\n        top = undefined;\n      } else {\n        top = pos.parentHeight - size.tooltipHeight;\n      }\n\n      bottom = pos.parentHeight - pos.y;\n    }\n\n    if (right && right + size.tooltipWidth > pos.parentWidth) {\n      if (pos.hasParent) {\n        right = undefined;\n      }\n      left = 0;\n    }\n\n    if (bottom && bottom + size.tooltipHeight > pos.parentHeight) {\n      if (pos.hasParent) {\n        bottom = undefined;\n      }\n      top = 0;\n    }\n  }\n\n  const Content = (\n    <Base\n      data-type=\"tooltip-content\"\n      ref={ref}\n      style={{\n        left,\n        right,\n        top,\n        bottom,\n        ...(!pos.hasParent && { position: 'fixed' }),\n        ...(!size && { zIndex: -1 }),\n      }}\n    >\n      {children(pos, size)}\n    </Base>\n  );\n  const e = document.querySelector(`#${pos.portalId}`) as Element | undefined;\n  if (!pos.hasParent && e) {\n    return createPortal(Content, e);\n  }\n  return Content;\n};\n\ntype ITooltipProps = {\n  /** default 'ag-tooltip-portal' */\n  portalId: string;\n};\n\nexport interface IUseTooltip<T> {\n  Comp: <T>({\n    pos,\n    children,\n  }: {\n    pos: IPos<T> | undefined;\n    children: (pos: IPos<T>, size?: IPosSize) => JSX.Element;\n  }) => JSX.Element | null;\n  setPos: (\n    p?:\n      | {\n          element: MouseEvent;\n          parent: Element | null;\n          data: T;\n        }\n      | undefined,\n  ) => void;\n  pos: IPos<T> | undefined;\n}\n\nexport const useTooltip = <T,>(p?: ITooltipProps): IUseTooltip<T> => {\n  const portalId = p?.portalId || 'ag-tooltip-portal';\n  const [pos, setPosRaw] = useState<IPos<T>>();\n\n  useEffect(() => {\n    if (document.querySelectorAll(`#${portalId}`).length > 0) {\n      return;\n    }\n    const d = document.createElement('div');\n    d.id = portalId;\n    document.body.appendChild(d);\n    return () => {\n      try {\n        document.querySelector(`#${portalId}`)?.remove();\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      } catch (e) {\n        //\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const setPos = (p?: {\n    element: MouseEvent;\n    parent: Element | null;\n    data: T;\n  }) => {\n    if (!p) {\n      setPosRaw(undefined);\n      return;\n    }\n\n    let parentTop = 0;\n    let parentLeft = 0;\n    let parentWidth = document.body.clientWidth;\n    let parentHeight = document.body.clientHeight;\n    let x = 0;\n    let y = 0;\n\n    if (p.parent) {\n      ({\n        top: parentTop,\n        left: parentLeft,\n        width: parentWidth,\n        height: parentHeight,\n      } = p.parent.getBoundingClientRect());\n      x = p.element.pageX - parentLeft;\n      y = p.element.pageY - parentTop;\n    } else {\n      parentWidth = window.innerWidth;\n      parentHeight = window.innerHeight;\n      x = p.element.clientX;\n      y = p.element.clientY;\n    }\n\n    const p2 = {\n      cursor: p.element,\n      data: p.data,\n      parentWidth,\n      parentHeight,\n      x,\n      y,\n      hasParent: !!p.parent,\n      portalId,\n    };\n\n    setPosRaw(p2);\n  };\n\n  return {\n    Comp,\n    setPos,\n    pos,\n  };\n};\n","'use client';\nimport { css } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport type { CSSProperties } from 'react';\n\nimport { colours } from './colours';\n\n/** function that returns css that gives a text outline drop shadow.\n * @param outlineColour default='white'\n * @param sizePx default = 1px\n */\nexport const HardOutline = (outlineColour = 'white', sizePx = 1) => css`\\\nfilter: ${HardOutlineFilter(outlineColour, sizePx)};\n`;\n\nexport const HardOutlineFilter = (outlineColour = 'white', sizePx = 1) => {\n  const px = `${sizePx}px`;\n\n  return `drop-shadow(${px} ${px} 0px ${outlineColour})\n  drop-shadow(-${px} ${px} 0px ${outlineColour})\n  drop-shadow(${px} -${px} 0px ${outlineColour})\n  drop-shadow(-${px} -${px} 0px ${outlineColour})`;\n};\n\n/** disable user text selection */\nexport const NoTextSelect = css`\n  user-select: none; /* supported by Chrome and Opera */\n  -webkit-user-select: none; /* Safari */\n  -khtml-user-select: none; /* Konqueror HTML */\n  -moz-user-select: none; /* Firefox */\n  -ms-user-select: none; /* Internet Explorer/Edge */\n`;\n\n/** enable text overflow\n * @param lines number of lines before overflow\n */\nexport const TextOverflowEllipsis = (lines: number) => css`\n  display: -webkit-box;\n  -webkit-line-clamp: ${lines};\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\n/** stop dragging of element */\nexport const noDrag: {\n  draggable: boolean;\n  onDragStart: React.DragEventHandler<HTMLDivElement>;\n  onTouchStart: React.TouchEventHandler<HTMLDivElement>;\n} = {\n  draggable: false,\n  onDragStart: (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n  },\n  onTouchStart: (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n  },\n};\n\n/** apply bounce effect given a condition */\nexport const bounce = (bounceattr: string) => css`\n  transition:\n    opacity 0.2s ease,\n    transform 0.2s cubic-bezier(0.02, 1.5, 0.74, 1.23);\n  transform-origin: 50% 50%;\n  transform: translateY(-5px);\n  &[${bounceattr}='true'] {\n    transform: translateY(0);\n  }\n`;\n\nexport const Card = styled.div`\n  background-color: white;\n  margin: 0.5rem;\n\n  position: relative;\n  border-radius: 0.5rem;\n  max-width: 40rem;\n  padding: 1rem;\n  border: solid 2px ${colours.lighter};\n`;\n\nexport interface IVarStyles {\n  /** default var(--main-fg) */\n  color: string;\n  /** default var(--main-bg) */\n  backgroundColor: string;\n  /** default var(--main-bg-mid) */\n  borderColor: string;\n}\n\nexport const getVarStyles = (\n  raw?: Partial<IVarStyles & CSSProperties>,\n): IVarStyles => ({\n  ...raw,\n  color: raw?.color ?? 'var(--main-fg)',\n  backgroundColor: raw?.backgroundColor ?? 'var(--main-bg)',\n  borderColor: raw?.borderColor ?? 'var(--main-bg-mid)',\n});\n","'use client';\nimport styled from '@emotion/styled';\n\nimport { smallScreen } from './media';\n\nexport const SOBase = styled.div`\n  display: flex;\n  width: 100%;\n  flex-grow: 1;\n  flex-flow: column;\n  overflow: hidden;\n  align-content: flex-start;\n  align-items: flex-start;\n\n  > h1,\n  h2,\n  > p {\n    white-space: pre-wrap;\n    font-size: 1.2rem;\n  }\n  h1,\n  h2 {\n    font-weight: normal;\n    font-size: 2rem;\n    flex-basis: 100%;\n    margin: 0;\n  }\n`;\n\nexport const SOBR = styled.div`\n  height: 0.5rem;\n  width: 0.5rem;\n`;\n\nexport const SOB = styled.div`\n  font-size: 1.4em;\n  font-weight: bold;\n`;\n\nexport const SOP = styled.div`\n  margin-bottom: 1rem;\n`;\n\nexport const SOCenter = styled.div`\n  display: flex;\n  flex-flow: column;\n  margin-left: auto;\n  margin-right: auto;\n  @media ${smallScreen} {\n    width: calc(100% - 2rem);\n  }\n`;\n\nexport const SOA = styled.a`\n  width: fit-content;\n  color: rgb(125, 171, 255);\n  text-decoration: none;\n  &:hover {\n    text-decoration: underline;\n  }\n  &[data-inline='true'] {\n    display: inline-block;\n    margin-left: 5px;\n    margin-right: 5px;\n  }\n  &[data-inline='false'] {\n    display: flex;\n    margin: auto;\n  }\n`;\n"],"names":[],"sourceRoot":""}
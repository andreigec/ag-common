{"version":3,"file":"Toast-stories.33338f66.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;AAwBA;;;;;;;;;;;;;;;;;;;;;;ACMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACcA;;;;;;;;;;;;;AAwCA;;;;;;;ACrEA;;;;;AAOA;;;;;;;;;;;AA2BA;;;;;;;;;;;ACZA;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;AAmBA;;;;AAMA;;;AAKA;ACtEA;AAGA;;;;;;AAoBA;;AAGA;;;;AAMA;;;;;;AAwBA;;;AAyBA;;;;;;;;AAZA;AAYA;;;;;;;;;;;;;;;;;;;;;;AChEA;;;AAKA;;;AAKA;;AAIA;;;;;AAKA;;;AAKA","sources":["webpack://ag-common/./src/ui/components/FlexColumn/index.tsx","webpack://ag-common/./src/ui/components/FlexRow/index.tsx","webpack://ag-common/./src/ui/components/Icon/index.tsx","webpack://ag-common/./src/ui/components/ProgressBar/index.tsx","webpack://ag-common/./src/ui/components/Toast/base.tsx","webpack://ag-common/./src/ui/styles/common.tsx","webpack://ag-common/./src/ui/styles/standaloneStyles.ts"],"sourcesContent":["'use client';\nimport styled from '@emotion/styled';\nimport React from 'react';\n\nimport type { IFlexColumn } from '../RowOrColumn';\n\nconst Base = styled.div`\n  position: relative;\n  display: flex;\n  flex-flow: column;\n  flex-grow: 1;\n  width: 100%;\n  height: 100%;\n  &[data-center='true'] {\n    justify-content: center;\n    align-items: center;\n  }\n  &[data-nogrow='true'] {\n    flex-grow: 0;\n    width: unset;\n    height: unset;\n  }\n`;\n\nexport const FlexColumn = (props: IFlexColumn) => (\n  <Base\n    data-nogrow={props.noGrow ?? false}\n    data-center={props.center ?? false}\n    {...props}\n  >\n    {props.children}\n  </Base>\n);\n","'use client';\nimport styled from '@emotion/styled';\nimport React from 'react';\n\nimport type { IFlexRow } from '../RowOrColumn';\n\nconst Base = styled.div`\n  position: relative;\n  display: flex;\n  flex-flow: row wrap;\n\n  &[data-nowrap='true'] {\n    flex-flow: row;\n  }\n\n  &[data-nogrow='true'] {\n    flex-grow: 0;\n  }\n  &[data-nogrow='false'] {\n    width: 100%;\n    height: 100%;\n    flex-grow: 1;\n  }\n\n  &[data-center='true'] {\n    justify-content: center;\n    align-items: center;\n  }\n`;\n\nexport const FlexRow = (props: IFlexRow) => (\n  <Base\n    data-nowrap={props.noWrap ?? false}\n    data-nogrow={props.noGrow ?? false}\n    data-center={props.center ?? false}\n    {...props}\n  >\n    {props.children}\n  </Base>\n);\n","'use client';\nimport styled from '@emotion/styled';\nimport type { CSSProperties } from 'react';\nimport React from 'react';\n\nimport { removeUndefValuesFromObject } from '../../../common/helpers/object';\nimport { HardOutline } from '../../styles/common';\n\nexport const IconF = styled.span`\n  transition: all 200ms;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 2rem;\n  cursor: inherit;\n  width: 100%;\n  height: 100%;\n  padding: 0;\n  margin: unset;\n  &[data-chnd='true'] {\n    cursor: pointer;\n    &:hover {\n      filter: saturate(3);\n    }\n  }\n\n  > svg {\n    flex-grow: 1;\n  }\n\n  &[data-hasfill='true'] {\n    fill: var(--fill);\n\n    svg {\n      fill: var(--fill);\n    }\n\n    linearGradient > *,\n    radialGradient > * {\n      stop-color: var(--fill) !important;\n    }\n  }\n\n  &[data-hasoutline='true'] {\n    ${HardOutline('var(--outlinecolour)')}\n  }\n\n  svg {\n    width: 100%;\n    height: 100%;\n    object-fit: contain;\n    aspect-ratio: 1/1;\n  }\n\n  img {\n    object-fit: contain;\n  }\n`;\n\nexport interface IIcon {\n  disabled?: boolean;\n  outline?: string;\n  rotate?: number;\n  canHover?: boolean;\n  onClick?: (e: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void;\n  children?: React.ReactNode;\n  role?: string;\n  title?: string;\n  tabIndex?: number;\n  className?: string;\n  style?: {\n    /** default 100% */\n    width?: string;\n    /** default 100% */\n    height?: string;\n    /** default 0 */\n    padding?: string;\n    /** default unset */\n    margin?: string;\n    /** pass fill down to svg */\n    fill?: string;\n  } & CSSProperties;\n}\n\nexport const Icon = (pr: IIcon) => {\n  const { className, children, disabled, onClick } = pr;\n  const CHND = pr.canHover && !pr.disabled;\n  const style: CSSProperties = removeUndefValuesFromObject({\n    ...(pr.style ?? {}),\n    '--fill': pr.style?.fill ?? null,\n    width: pr.style?.width,\n    height: pr.style?.height,\n    padding: pr.style?.padding,\n    margin: pr.style?.margin,\n    transform: !pr.rotate ? null : `rotate(${pr.rotate || 0}deg)`,\n    filter: !pr.disabled ? null : 'grayscale(1)',\n    '--outlinecolour': pr.outline || null,\n  });\n\n  return (\n    <IconF\n      {...pr}\n      className={className}\n      onClick={(e: React.MouseEvent<HTMLSpanElement, MouseEvent>) =>\n        !disabled && onClick?.(e)\n      }\n      style={style}\n      data-chnd={CHND}\n      data-hasoutline={pr.outline}\n      data-hasfill={!!pr.style?.fill}\n      data-type=\"iconbox\"\n    >\n      {children}\n    </IconF>\n  );\n};\n","'use client';\nimport styled from '@emotion/styled';\nimport React, { useEffect, useState } from 'react';\n\nimport { colours } from '../../styles';\n\nconst Base = styled.div`\n  position: relative;\n  min-width: 5rem;\n  width: 100%;\n  height: 2rem;\n  border-radius: 1rem;\n  overflow: hidden;\n`;\n\nconst Bar = styled.div`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n`;\n\nconst Dot = styled.div`\n  position: absolute;\n  top: calc(50% - 0.25rem);\n  width: 0.5rem;\n  height: 0.5rem;\n  background-color: #aaa;\n  z-index: 1;\n  border-radius: 50%;\n  &[data-invert='true'] {\n    background-color: #333;\n  }\n`;\n\nexport interface IProgressBar {\n  min: number;\n  max: number;\n  /** default #4d76ff */\n  frontColour?: string;\n  /** default #eee */\n  backColour?: string;\n  /** default 25,50,75 */\n  dotPercentages?: number[] | null;\n  className?: string;\n  /** if true, will transition to the end in X ms */\n  transitionToMs?: number;\n}\n\nexport const ProgressBar = (p: IProgressBar) => {\n  const {\n    transitionToMs = 200,\n    frontColour = colours.notificationBlue,\n    backColour = '#eee',\n    dotPercentages = [25, 50, 75],\n  } = p;\n\n  const [barWidth, setBarWidth] = useState((p.min / p.max) * 100);\n  useEffect(() => {\n    const newbw = (p.min / p.max) * 100;\n    if (barWidth !== newbw) {\n      setBarWidth(newbw);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [p.min, p.max]);\n\n  useEffect(() => {\n    if (transitionToMs) {\n      setBarWidth(p.max);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <Base\n      style={{\n        backgroundColor: backColour,\n      }}\n      className={p.className}\n    >\n      <Bar\n        style={{\n          width: `${barWidth}%`,\n          backgroundColor: frontColour,\n          transition: `width ${transitionToMs}ms linear`,\n        }}\n      />\n      {dotPercentages?.map((v) => (\n        <Dot\n          key={v}\n          style={{ left: `calc(${v}% - 0.25rem)` }}\n          data-invert={v > barWidth}\n        />\n      ))}\n    </Base>\n  );\n};\n","'use client';\nimport styled from '@emotion/styled';\nimport React, { createContext, useEffect, useMemo, useState } from 'react';\n\nimport { random } from '../../../common/helpers/random';\nimport { Warning } from '../../icons/Warning';\nimport type { IVarStyles } from '../../styles/common';\nimport { getVarStyles } from '../../styles/common';\nimport { FlexColumn } from '../FlexColumn';\nimport { FlexRow } from '../FlexRow';\nimport { ProgressBar } from '../ProgressBar';\nimport { Cross } from './Cross';\nimport { Tick } from './Tick';\nimport type {\n  IToastInt,\n  IToastProviderOptions,\n  TAddToast,\n  TAddToastDetailed,\n} from './types';\n\nexport const ToastContext = createContext<{\n  addToast: TAddToast;\n  addToastDetailed: TAddToastDetailed;\n}>({} as any);\nconst ToastContainerStyle = styled.div`\n  position: fixed;\n  bottom: 0;\n  right: 0;\n  margin: 0.5rem;\n  z-index: 10000;\n\n  display: flex;\n  flex-flow: column;\n  align-items: flex-end;\n  max-width: 50vw;\n`;\n\nconst ToastStyle = styled.div`\n  display: flex;\n  flex-flow: row wrap;\n  align-items: center;\n  padding: 0.5rem;\n  position: relative;\n  font-size: 1.2rem;\n  &:not(:last-of-type) {\n    margin-bottom: 8px;\n  }\n\n  border: solid 1px;\n  border-radius: 6px;\n`;\n\nconst CloseStyle = styled.span`\n  position: absolute;\n  top: 0;\n  right: 0;\n  width: 0.5rem;\n  height: 0.5rem;\n\n  cursor: pointer;\n  border-radius: 50%;\n  padding: 0.5rem;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: white;\n  z-index: 1;\n  &:hover {\n    background-color: var(--bg);\n  }\n`;\nconst Icon = styled.div`\n  width: 1.5rem;\n  height: 1.5rem;\n  margin-right: 0.5rem;\n`;\n\nconst ProgressBarStyled = styled(ProgressBar)`\n  height: 0.75rem;\n  margin-top: 0.5rem;\n`;\n\nexport const Toast = ({\n  toast,\n  close,\n  style,\n}: {\n  toast: IToastInt;\n  style: IVarStyles;\n  close: (s: string) => void;\n}) => {\n  let closeMs: number | undefined;\n  if (toast.options?.autoClose) {\n    closeMs = toast.options.autoClose;\n  } else if (toast.options?.autoClose === undefined) {\n    if (toast.options?.appearance === 'success') {\n      closeMs = 5000;\n    } else {\n      closeMs = 10000;\n    }\n  }\n\n  let icon = <Tick />;\n\n  switch (toast.options?.appearance) {\n    case 'error': {\n      icon = <Cross />;\n      break;\n    }\n    case 'warning': {\n      icon = <Warning />;\n      break;\n    }\n\n    case 'success':\n    default: {\n      icon = <Tick />;\n      break;\n    }\n    case undefined:\n  }\n\n  useEffect(() => {\n    if (!closeMs) {\n      return;\n    }\n    const timeout = setTimeout(() => close(toast.id), closeMs);\n    return () => clearTimeout(timeout);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const closeStyle = { color: style.color, '--bg': style.borderColor };\n  const toastStyle = {\n    ...style,\n    boxShadow: `hsl(from ${style.borderColor} h s 25%) 0px 7px 29px 0px`,\n  };\n\n  if (toast.type === 'standard') {\n    return (\n      <ToastStyle style={toastStyle}>\n        <CloseStyle onClick={() => close(toast.id)} style={closeStyle}>\n          &times;\n        </CloseStyle>\n        <Icon style={{ fill: style.color }}>{icon}</Icon>\n        {toast.message}\n        {closeMs !== undefined && (\n          <ProgressBarStyled\n            max={100}\n            min={0}\n            dotPercentages={null}\n            transitionToMs={closeMs}\n          />\n        )}\n      </ToastStyle>\n    );\n  }\n  return (\n    <ToastStyle style={toastStyle}>\n      <CloseStyle onClick={() => close(toast.id)} style={closeStyle}>\n        &times;\n      </CloseStyle>\n      <FlexRow noWrap center>\n        {toast.icon === undefined && <Icon>{icon}</Icon>}\n        {toast.icon}\n        <FlexColumn\n          style={{ marginLeft: toast.icon === null ? '0' : '0.5rem' }}\n        >\n          <b>{toast.title}</b>\n          {toast.content}\n        </FlexColumn>\n      </FlexRow>\n\n      {closeMs !== undefined && (\n        <ProgressBarStyled\n          max={100}\n          min={0}\n          dotPercentages={null}\n          transitionToMs={closeMs}\n        />\n      )}\n    </ToastStyle>\n  );\n};\n\nexport const ToastProvider = ({\n  children,\n  providerOptions,\n}: {\n  children: React.ReactNode;\n  providerOptions?: IToastProviderOptions;\n}) => {\n  const [toasts, setToasts] = useState<IToastInt[]>([]);\n  const addToast: TAddToast = (message, options) =>\n    setToasts((currentToasts) => [\n      ...currentToasts.filter(\n        (ct) =>\n          ct.type === 'detailed' ||\n          ct.message !== message ||\n          JSON.stringify(ct.options) !== JSON.stringify(options),\n      ),\n      { id: random(10000).toString(), message, options, type: 'standard' },\n    ]);\n\n  const addToastDetailed: TAddToastDetailed = (p, options) =>\n    setToasts((currentToasts) => [\n      ...currentToasts,\n      { id: random(10000).toString(), ...p, options, type: 'detailed' },\n    ]);\n\n  const close = (id: string) =>\n    setToasts((currentToasts) =>\n      currentToasts.filter((toast) => toast.id !== id),\n    );\n  const contextValue = useMemo(() => ({ addToast, addToastDetailed }), []);\n  const style = getVarStyles(providerOptions?.style);\n\n  return (\n    <ToastContext.Provider value={contextValue}>\n      {children}\n      <ToastContainerStyle>\n        {toasts.map((toast) => (\n          <Toast key={toast.id} toast={toast} close={close} style={style} />\n        ))}\n      </ToastContainerStyle>\n    </ToastContext.Provider>\n  );\n};\n","'use client';\nimport { css } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport type { CSSProperties } from 'react';\n\nimport { colours } from './colours';\n\n/** function that returns css that gives a text outline drop shadow.\n * @param outlineColour default='white'\n * @param sizePx default = 1px\n */\nexport const HardOutline = (outlineColour = 'white', sizePx = 1) => css`\\\nfilter: ${HardOutlineFilter(outlineColour, sizePx)};\n`;\n\nexport const HardOutlineFilter = (outlineColour = 'white', sizePx = 1) => {\n  const px = `${sizePx}px`;\n\n  return `drop-shadow(${px} ${px} 0px ${outlineColour})\n  drop-shadow(-${px} ${px} 0px ${outlineColour})\n  drop-shadow(${px} -${px} 0px ${outlineColour})\n  drop-shadow(-${px} -${px} 0px ${outlineColour})`;\n};\n\n/** disable user text selection */\nexport const NoTextSelect = css`\n  user-select: none; /* supported by Chrome and Opera */\n  -webkit-user-select: none; /* Safari */\n  -khtml-user-select: none; /* Konqueror HTML */\n  -moz-user-select: none; /* Firefox */\n  -ms-user-select: none; /* Internet Explorer/Edge */\n`;\n\n/** enable text overflow\n * @param lines number of lines before overflow\n */\nexport const TextOverflowEllipsis = (lines: number) => css`\n  display: -webkit-box;\n  -webkit-line-clamp: ${lines};\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\n/** stop dragging of element */\nexport const noDrag: {\n  draggable: boolean;\n  onDragStart: React.DragEventHandler<HTMLDivElement>;\n  onTouchStart: React.TouchEventHandler<HTMLDivElement>;\n} = {\n  draggable: false,\n  onDragStart: (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n  },\n  onTouchStart: (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n  },\n};\n\n/** apply bounce effect given a condition */\nexport const bounce = (bounceattr: string) => css`\n  transition:\n    opacity 0.2s ease,\n    transform 0.2s cubic-bezier(0.02, 1.5, 0.74, 1.23);\n  transform-origin: 50% 50%;\n  transform: translateY(-5px);\n  &[${bounceattr}='true'] {\n    transform: translateY(0);\n  }\n`;\n\nexport const Card = styled.div`\n  background-color: white;\n  margin: 0.5rem;\n\n  position: relative;\n  border-radius: 0.5rem;\n  max-width: 40rem;\n  padding: 1rem;\n  border: solid 2px ${colours.lighter};\n`;\n\nexport interface IVarStyles {\n  /** default var(--main-fg) */\n  color: string;\n  /** default var(--main-bg) */\n  backgroundColor: string;\n  /** default var(--main-bg-mid) */\n  borderColor: string;\n}\n\nexport const getVarStyles = (\n  raw?: Partial<IVarStyles & CSSProperties>,\n): IVarStyles => ({\n  ...raw,\n  color: raw?.color ?? 'var(--main-fg)',\n  backgroundColor: raw?.backgroundColor ?? 'var(--main-bg)',\n  borderColor: raw?.borderColor ?? 'var(--main-bg-mid)',\n});\n","'use client';\nimport styled from '@emotion/styled';\n\nimport { smallScreen } from './media';\n\nexport const SOBase = styled.div`\n  display: flex;\n  width: 100%;\n  flex-grow: 1;\n  flex-flow: column;\n  overflow: hidden;\n  align-content: flex-start;\n  align-items: flex-start;\n\n  > h1,\n  h2,\n  > p {\n    white-space: pre-wrap;\n    font-size: 1.2rem;\n  }\n  h1,\n  h2 {\n    font-weight: normal;\n    font-size: 2rem;\n    flex-basis: 100%;\n    margin: 0;\n  }\n`;\n\nexport const SOBR = styled.div`\n  height: 0.5rem;\n  width: 0.5rem;\n`;\n\nexport const SOB = styled.div`\n  font-size: 1.4em;\n  font-weight: bold;\n`;\n\nexport const SOP = styled.div`\n  margin-bottom: 1rem;\n`;\n\nexport const SOCenter = styled.div`\n  display: flex;\n  flex-flow: column;\n  margin-left: auto;\n  margin-right: auto;\n  @media ${smallScreen} {\n    width: calc(100% - 2rem);\n  }\n`;\n\nexport const SOA = styled.a`\n  width: fit-content;\n  color: rgb(125, 171, 255);\n  text-decoration: none;\n  &:hover {\n    text-decoration: underline;\n  }\n  &[data-inline='true'] {\n    display: inline-block;\n    margin-left: 5px;\n    margin-right: 5px;\n  }\n  &[data-inline='false'] {\n    display: flex;\n    margin: auto;\n  }\n`;\n"],"names":[],"sourceRoot":""}
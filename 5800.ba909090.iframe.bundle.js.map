{"version":3,"file":"5800.ba909090.iframe.bundle.js","mappings":";;;;AAeA;;;;;;AAOA;;;;;;AAQA;;;;;;;AAOA;;;;;;AAQA;;;;;;;AASA;;;;;;;;;;;AAaA;;;;;AAOA;;;;AC9DA;;;;;;;;;AAWA;;ACZA;;AAGA;;;AAKA;;;;;AAMA;;;;;;;;AASA;;;;;;;;;;;ACJA;;;;;;;;;;AAYA","sources":["webpack://ag-common/./src/ui/components/LineChart/LegendX.tsx","webpack://ag-common/./src/ui/components/LineChart/LegendY.tsx","webpack://ag-common/./src/ui/components/LineChart/TooltipContent.tsx","webpack://ag-common/./src/ui/components/LineChart/Base.tsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport React from 'react';\n\nimport { twelveHMs } from '../../../common';\nimport { smallScreen } from '../../styles';\nimport type { IVarStyles } from '../../styles/common';\nimport { getLegendItems } from './getLegendItems';\nimport type { ILineChartItemRaw } from './types';\n\nconst Base = styled.div`\n  display: flex;\n  flex-flow: column;\n  width: 100%;\n`;\n\nconst Bar = styled.div`\n  width: 100%;\n  display: flex;\n  flex-flow: row;\n  position: relative;\n  margin-bottom: 0.25rem;\n`;\nconst Line = styled.div`\n  position: absolute;\n  top: calc(50% - 1px);\n  height: 2px;\n  left: 0;\n  right: 0;\n`;\n\nconst Numbers = styled.div`\n  width: 100%;\n  display: flex;\n  flex-flow: row;\n  justify-content: space-between;\n  z-index: 1;\n\n  @media ${smallScreen} {\n    [data-group='1'],\n    [data-group='2'] {\n      display: none;\n    }\n  }\n`;\n\nconst Items = styled.div`\n  width: 100%;\n  display: flex;\n  flex-flow: row wrap;\n  position: relative;\n  justify-content: space-between;\n  margin-top: 0.5rem;\n`;\n\nconst Item = styled.div`\n  display: flex;\n  flex-flow: row;\n  position: relative;\n  align-items: center;\n  &:not(:first-of-type) {\n    padding-left: 0.5rem;\n  }\n  &:not(:last-of-type) {\n    padding-right: 0.5rem;\n  }\n`;\n\nconst Col = styled.div`\n  width: 1rem;\n  height: 1rem;\n  border-radius: 50%;\n  margin-right: 0.25rem;\n`;\n\nexport const LegendX = ({\n  data,\n  lt,\n  tt,\n  colours,\n  style,\n}: {\n  data: ILineChartItemRaw[];\n  colours: Record<string, string>;\n  lt: (a: number) => string;\n  tt: (a: number) => string;\n  style: IVarStyles;\n}) => {\n  const legendItems = getLegendItems({\n    data,\n    colours,\n    fixed: true,\n    lt,\n    tt,\n  }).part;\n  const xs = data.map((a) => a.x);\n  const ys = data.map((a) => a.y);\n  const minX = Math.min(...xs);\n  const maxX = Math.max(...xs);\n  const maxY = Math.max(...ys);\n\n  const itemsRaw: { v: number; group: number }[] = [{ v: minX, group: 0 }];\n  const gc = 8;\n  const gap = (maxX - minX) / gc;\n\n  if (gap > twelveHMs) {\n    for (let a = 1; a < gc; a += 1) {\n      itemsRaw.push({ v: itemsRaw[a - 1].v + gap, group: (a % 3) + 1 });\n    }\n  }\n  itemsRaw.push({ v: maxX, group: 0 });\n\n  const items = itemsRaw.map((d) => ({ v: lt(d.v), group: d.group }));\n\n  const ch = maxY.toString().length + 1;\n\n  return (\n    <Base\n      style={{\n        ...style,\n        marginLeft: 'auto',\n        width: `calc(100% - ${ch}ch)`,\n      }}\n    >\n      <Bar>\n        <Line style={{ backgroundColor: style.color }} />\n        <Numbers>\n          {items.map((i, i2) => (\n            <span\n              // eslint-disable-next-line react/no-array-index-key\n              key={i.v + i2}\n              data-group={i.group}\n              style={{ backgroundColor: style.backgroundColor }}\n            >\n              {i.v}\n            </span>\n          ))}\n        </Numbers>\n      </Bar>\n      {legendItems.length > 1 && (\n        <Items>\n          {legendItems.map((k) => (\n            <Item key={k.name}>\n              <Col style={{ backgroundColor: k.colour }} />\n              {k.name}\n            </Item>\n          ))}\n        </Items>\n      )}\n    </Base>\n  );\n};\n","import styled from '@emotion/styled';\nimport React from 'react';\n\nimport type { IVarStyles } from '../../styles/common';\nimport type { ILineChartItemRaw } from './types';\n\nconst Base = styled.div`\n  display: flex;\n  flex-flow: row;\n  width: 100%;\n`;\n\nconst Numbers = styled.div`\n  width: 100%;\n  display: flex;\n  flex-flow: column-reverse;\n  justify-content: space-between;\n  z-index: 1;\n  > span {\n    text-align: right;\n  }\n`;\n\nexport const LegendY = ({\n  data,\n  style,\n}: {\n  data: ILineChartItemRaw[];\n  style: IVarStyles;\n}) => {\n  const ys = data.map((a) => a.y);\n  const minY = Math.min(...ys);\n  const maxY = Math.max(...ys);\n\n  const items = [minY];\n  const gc = 3;\n  const gap = (maxY - minY) / gc;\n\n  for (let a = 1; a < gc; a += 1) {\n    items.push(Math.floor(items[a - 1] + gap));\n  }\n  items.push(maxY);\n\n  const ch = maxY.toString().length;\n\n  const roundNumber = (num: number): string => {\n    // Round to 2 decimal places and remove trailing zeros\n    const rounded = Math.round(num * 100) / 100;\n    return rounded % 1 === 0\n      ? rounded.toString()\n      : rounded.toFixed(2).replace(/\\.?0+$/, '');\n  };\n\n  return (\n    <Base style={{ ...style, maxWidth: `${ch}ch`, paddingRight: '1ch' }}>\n      <Numbers>\n        {items.map((i, i2) => (\n          <span\n            // eslint-disable-next-line react/no-array-index-key\n            key={i + i2}\n            style={{\n              color: style.color,\n              backgroundColor: style.backgroundColor,\n            }}\n          >\n            {roundNumber(i)}\n          </span>\n        ))}\n      </Numbers>\n    </Base>\n  );\n};\n","import styled from '@emotion/styled';\nimport React from 'react';\n\nimport type { IVarStyles } from '../../styles/common';\nimport type { ILegendItems } from './getLegendItems';\nimport type { ILineChartTooltip } from './types';\n\nconst Base = styled.div`\n  padding: 0.5rem;\n`;\n\nconst Title = styled.div`\n  font-weight: bold;\n`;\nconst Row = styled.div`\n  width: 100%;\n  display: flex;\n`;\n\nconst ItemTitle = styled.span`\n  &[data-selected='true'] {\n    font-weight: bold;\n    text-decoration: underline;\n  }\n`;\nconst Total = styled.span`\n  margin-left: auto;\n  padding-left: 0.5rem;\n\n  &[data-selected='true'] {\n    font-weight: bold;\n    text-decoration: underline;\n  }\n`;\nexport const TooltipContent = (\n  p: ILineChartTooltip & {\n    legendItems: ILegendItems;\n    style: IVarStyles;\n  },\n) => {\n  const name = p.tt(p.selectedXs?.[0].x ?? 0);\n\n  const roundNumber = (num: number): string => {\n    // Round to 2 decimal places and remove trailing zeros\n    const rounded = Math.round(num * 100) / 100;\n    return rounded % 1 === 0\n      ? rounded.toString()\n      : rounded.toFixed(2).replace(/\\.?0+$/, '');\n  };\n\n  return (\n    <Base\n      style={{\n        ...p.style,\n        border: `solid 1px ${p.style.borderColor}`,\n      }}\n    >\n      <Title>{name}</Title>\n      <Row>\n        <span>total</span>\n        <Total>{roundNumber(p.legendItems.total)}</Total>\n      </Row>\n      {p.legendItems.part.map((v) => (\n        <Row key={v.name + v.y} style={{ color: v.colour }}>\n          <ItemTitle>{v.name}</ItemTitle>\n          <Total>{roundNumber(v.y)}</Total>\n        </Row>\n      ))}\n      {p.legendItems.rest.length > 0 && (\n        <Row>\n          <span>{p.legendItems.rest.length} more</span>\n          <Total>{roundNumber(p.legendItems.restTotal)}</Total>\n        </Row>\n      )}\n    </Base>\n  );\n};\n","'use client';\nimport styled from '@emotion/styled';\nimport React from 'react';\n\nimport { distinctBy } from '../../../common/helpers/array';\nimport { rangePercentage } from '../../../common/helpers/math';\nimport { useTooltip } from '../../helpers/useTooltip';\nimport { getVarStyles } from '../../styles/common';\nimport { FlexRow } from '../FlexRow';\nimport { timeLegendTitle, timeTooltipTitle } from './dateHelpers';\nimport { getLegendItems } from './getLegendItems';\nimport { interpolate } from './interpolate';\nimport { LegendX } from './LegendX';\nimport { LegendY } from './LegendY';\nimport { TooltipContent } from './TooltipContent';\nimport type { ILineChart, ILineChartState } from './types';\n\nconst Base = styled.div`\n  padding: 0.5rem;\n  width: calc(100% - 1rem);\n  height: calc(100% - 1rem);\n\n  display: flex;\n  flex-flow: column;\n  justify-content: center;\n  align-items: flex-end;\n  overflow: hidden;\n  position: relative;\n`;\n\nconst Svg = styled.svg`\n  padding: 2px;\n  width: calc(100% - 5px);\n  height: calc(100% - 5px);\n\n  @keyframes dash {\n    to {\n      stroke-dashoffset: 1000;\n    }\n  }\n`;\n\nexport const LineChart = (p: ILineChart) => {\n  const UT = useTooltip<ILineChartState>();\n  const style = getVarStyles(p.style);\n\n  const { points, xTime } = interpolate(p.data);\n\n  let tt = p.tooltipTitle;\n  if (!tt && xTime) {\n    tt = timeTooltipTitle;\n  }\n  tt ??= (s) => s.toString();\n\n  let lt = p.legendTitle;\n  if (!lt && xTime) {\n    lt = timeLegendTitle;\n  }\n  lt ??= (s) => s.toString();\n\n  const lt2 = lt as (a: number) => string;\n\n  const tt2 = tt as (a: number) => string;\n\n  const legendItems = getLegendItems({\n    colours: p.colours,\n    data: p.data,\n    tt: tt2,\n    lt: lt2,\n    ...UT.pos?.data,\n    fixed: false,\n  });\n\n  const SvgC = (\n    <Svg\n      style={{\n        borderLeft: `solid 1px ${style.borderColor}`,\n        borderTop: `solid 1px ${style.borderColor}`,\n      }}\n      transform=\"scale(-1,1) scale(-1,-1)\"\n      strokeWidth={'3px'}\n      fillOpacity={1}\n      preserveAspectRatio=\"none\"\n      onMouseMove={(element) => {\n        const parent = element.currentTarget.closest(\"[data-type='lcb']\");\n        const bb = parent?.getBoundingClientRect();\n        if (!bb) {\n          return;\n        }\n\n        const relativeX =\n          rangePercentage({\n            value: element.pageX,\n            min: bb.left,\n            max: bb.left + bb.width,\n          }) * 100;\n\n        let selectedPoints = points.filter(\n          (p) => relativeX >= p.x1 && relativeX < p.x2,\n        );\n\n        //if there are just single dots on the graph, choose the ones that are closest (share the smallest gap distance)\n        if (selectedPoints.length === 0) {\n          const sp1 = points\n            .map((p) => ({\n              ...p,\n              gap: Math.abs(p.x1 - relativeX),\n            }))\n            .sort((a, b) => (a.gap < b.gap ? -1 : 1));\n          const mingap = sp1[0].gap;\n          selectedPoints = sp1.filter((r) => r.gap === mingap);\n        }\n        const selectedXs = distinctBy(\n          p.data.filter(({ x, y }) =>\n            selectedPoints.find((a) => a.origX === x && a.origY === y),\n          ),\n          (s) => JSON.stringify(s),\n        );\n        UT.setPos({\n          element,\n          parent,\n          data: {\n            selectedPoints: selectedPoints.map((a) => ({\n              x: a.origX,\n              y: a.origY,\n            })),\n            selectedXs,\n          },\n        });\n      }}\n    >\n      {points.map((p2) => {\n        const isSelected = p2.origX === UT.pos?.data.selectedXs?.[0]?.x;\n        return (\n          <React.Fragment key={JSON.stringify(p2)}>\n            {\n              //mouse selected\n              (isSelected ||\n                //only single date point\n                p2.x1 === p2.x2 ||\n                //is the last point\n                p2.isLast) && (\n                <circle\n                  cx={`${p2.x2}%`}\n                  cy={`${p2.y2}%`}\n                  r=\"8px\"\n                  style={{ zIndex: 1 }}\n                  {...(p2.isToday && p2.isLast && !isSelected\n                    ? { stroke: p.colours[p2.name], fill: 'transparent' }\n                    : { fill: p.colours[p2.name] })}\n                ></circle>\n              )\n            }\n            {p2.x1 !== p2.x2 && (\n              <line\n                strokeOpacity={\n                  legendItems.part.find((f) => f.name === p2.name) ? 1 : 0.3\n                }\n                x1={`${p2.x1}%`}\n                x2={`${p2.x2}%`}\n                y1={`${p2.y1}%`}\n                y2={`${p2.y2}%`}\n                style={{\n                  stroke: p.colours[p2.name],\n                  ...(p2.isToday && {\n                    strokeDasharray: 10,\n                    animation: 'dash 50s linear reverse infinite',\n                  }),\n                }}\n              />\n            )}\n          </React.Fragment>\n        );\n      })}\n    </Svg>\n  );\n  return (\n    <Base\n      className={p.className}\n      data-type=\"lcb\"\n      onMouseLeave={() => UT.setPos(undefined)}\n      style={style}\n    >\n      <UT.Comp pos={UT.pos}>\n        {(p2) => (\n          <TooltipContent\n            {...p2}\n            colours={p.colours}\n            data={p.data}\n            lt={lt2}\n            tt={tt2}\n            legendItems={legendItems}\n            style={style}\n          />\n        )}\n      </UT.Comp>\n      <FlexRow noWrap>\n        <LegendY data={p.data} style={style} />\n        {SvgC}\n      </FlexRow>\n      <LegendX\n        data={p.data}\n        colours={p.colours}\n        lt={lt}\n        tt={tt}\n        style={style}\n      />\n    </Base>\n  );\n};\n"],"names":[],"sourceRoot":""}
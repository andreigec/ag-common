{"version":3,"file":"9169.76c1cd78.iframe.bundle.js","mappings":";;;;;;;;;AAwBA;;;;;;;;;;;;;AAaA;AAGA;;;;;;;;;;;;AAYA;;;;;;AAMA;;;;;;;;;;;AAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3BA;;;;;;;;;;;;;AAwCA;;ACtEA","sources":["webpack://ag-common/./src/ui/components/DropdownList/Base.tsx","webpack://ag-common/./src/ui/components/Icon/index.tsx","webpack://ag-common/./src/ui/components/KebabDots/index.tsx"],"sourcesContent":["'use client';\nimport styled from '@emotion/styled';\nimport type { CSSProperties } from 'react';\nimport type { JSX } from 'react';\nimport React, { useEffect, useRef, useState } from 'react';\n\nimport { convertRemToPixels } from '../../helpers/dom';\nimport { useOnClickOutside } from '../../helpers/useOnClickOutside';\nimport { colours } from '../../styles/colours';\nimport { bounce } from '../../styles/common';\nimport { KebabDots } from '../KebabDots';\nimport type { IDropdownList } from './types';\n\nconst Base = styled.div`\n  display: flex;\n  flex-flow: row;\n  position: relative;\n  align-items: center;\n  justify-content: space-between;\n  cursor: pointer;\n  flex-grow: 0;\n  max-height: 100%;\n`;\n\nconst DropItems = styled.div`\n  flex-flow: column;\n  z-index: 1;\n  display: none;\n  background-color: white;\n  cursor: default;\n  width: 100%;\n  position: absolute;\n\n  overflow-y: auto;\n  &[data-open='true'] {\n    display: flex;\n  }\n  ${bounce('data-bounced')}\n`;\n\nconst ListItemStyle = styled.div`\n  font-weight: 500;\n  padding-left: 0.5rem;\n  flex-grow: 1;\n  padding: 1rem;\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  &[data-default='false'] {\n    &[data-selected='true'] {\n      opacity: 1 !important;\n      background-color: ${colours.orangeRed} !important;\n      cursor: default;\n    }\n    &[data-selected='false'] {\n      &:hover {\n        opacity: 0.9 !important;\n        background-color: ${colours.orange} !important;\n      }\n    }\n  }\n\n  &:nth-of-type(even) {\n    background-color: rgba(0, 0, 0, 0.1);\n  }\n  &:nth-of-type(odd) {\n    background-color: rgba(0, 0, 0, 0.2);\n  }\n`;\n\nconst ListItem = ({\n  render,\n  onChange,\n  selected,\n  defaultV = false,\n}: {\n  defaultV?: boolean;\n  selected: boolean;\n  render: JSX.Element | string;\n  onChange?: () => void;\n}) => (\n  <ListItemStyle\n    data-type=\"ddl-item\"\n    data-selected={selected}\n    data-default={defaultV}\n    onClick={(e) => {\n      if (!selected) {\n        onChange?.();\n      }\n\n      e.preventDefault();\n    }}\n  >\n    {render}\n  </ListItemStyle>\n);\n\nexport function DropdownList<T>(p: IDropdownList<T>) {\n  const { shadow = '#555', maxHeight = '50vh' } = p;\n\n  const ref = useRef<HTMLDivElement>(null);\n  const [state, setState] = useState(p.value);\n  const [open, setOpen] = useState(p.open);\n  const [bounced, setBounced] = useState(false);\n  useOnClickOutside(\n    { disabled: !open, ref: ref as any, moveMouseOutside: false },\n    () => {\n      setOpen(false);\n      setBounced(false);\n      p.onClose?.();\n    },\n  );\n\n  useEffect(() => {\n    const newv = p.value;\n\n    if (JSON.stringify(newv) !== JSON.stringify(state)) {\n      setState(newv);\n    }\n  }, [p.value, state]);\n\n  const [style, setStyle] = useState<CSSProperties>({});\n  useEffect(() => {\n    const maxLen = 20;\n    const newStyle: CSSProperties = {\n      minWidth: `calc(${maxLen}ch + 2rem)`,\n      filter: `drop-shadow(1px 1px 0.5rem ${shadow})`,\n      maxHeight,\n      width: 'fit-content',\n    };\n\n    const minPx = convertRemToPixels(2 + maxLen / 2);\n    const offsetLeft = ref.current?.offsetLeft ?? 0;\n    if (offsetLeft < minPx) {\n      newStyle.left = '0';\n    } else {\n      newStyle.right = '0';\n    }\n\n    const b = ref.current?.getBoundingClientRect() ?? { bottom: 0 };\n    const ih = typeof window !== 'undefined' ? window.innerHeight : 0;\n    //below screen\n    if (b.bottom + 50 > ih) {\n      newStyle.bottom = '1rem';\n    } else {\n      newStyle.top = '0';\n    }\n\n    if (JSON.stringify(style) !== JSON.stringify(newStyle)) {\n      setStyle(newStyle);\n    }\n  }, [maxHeight, open, p.options, p.renderF, shadow, style]);\n\n  const defaultRender = !p.value ? <KebabDots /> : <>{p.renderF(p.value, 0)}</>;\n  const openDisplay = p.children ?? (\n    <ListItem\n      selected\n      render={defaultRender}\n      key={defaultRender.key}\n      defaultV={!p.value}\n    />\n  );\n\n  useEffect(() => {\n    if (!bounced && open) {\n      setBounced(true);\n    }\n  }, [bounced, open]);\n\n  return (\n    <Base\n      className={p.className}\n      ref={ref}\n      title={p.placeholder}\n      onClick={(e) => {\n        e.stopPropagation();\n        e.preventDefault();\n        setOpen(!open);\n        if (open) {\n          p.onClose?.();\n        }\n      }}\n    >\n      <DropItems data-open={open} style={style} data-bounced={bounced}>\n        {open &&\n          p.options.map((s, i) => (\n            <ListItem\n              key={typeof s === 'string' ? s : p.renderF(s, i).key}\n              render={p.renderF(s, i)}\n              onChange={() => p.onChange(s, i)}\n              selected={s === state}\n            />\n          ))}\n      </DropItems>\n\n      {openDisplay}\n    </Base>\n  );\n}\n","'use client';\nimport styled from '@emotion/styled';\nimport type { CSSProperties } from 'react';\nimport React from 'react';\n\nimport { removeUndefValuesFromObject } from '../../../common/helpers/object';\nimport { HardOutline } from '../../styles/common';\n\nexport const IconF = styled.span`\n  transition: all 200ms;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 2rem;\n  cursor: inherit;\n  width: 100%;\n  height: 100%;\n  padding: 0;\n  margin: unset;\n  &[data-chnd='true'] {\n    cursor: pointer;\n    &:hover {\n      filter: saturate(3);\n    }\n  }\n\n  > svg {\n    flex-grow: 1;\n  }\n\n  &[data-hasfill='true'] {\n    fill: var(--fill);\n\n    svg {\n      fill: var(--fill);\n    }\n\n    linearGradient > *,\n    radialGradient > * {\n      stop-color: var(--fill) !important;\n    }\n  }\n\n  &[data-hasoutline='true'] {\n    ${HardOutline('var(--outlinecolour)')}\n  }\n\n  svg {\n    width: 100%;\n    height: 100%;\n    object-fit: contain;\n    aspect-ratio: 1/1;\n  }\n\n  img {\n    object-fit: contain;\n  }\n`;\n\nexport interface IIcon {\n  disabled?: boolean;\n  outline?: string;\n  rotate?: number;\n  canHover?: boolean;\n  onClick?: (e: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void;\n  children?: React.ReactNode;\n  role?: string;\n  title?: string;\n  tabIndex?: number;\n  className?: string;\n  style?: {\n    /** default 100% */\n    width?: string;\n    /** default 100% */\n    height?: string;\n    /** default 0 */\n    padding?: string;\n    /** default unset */\n    margin?: string;\n    /** pass fill down to svg */\n    fill?: string;\n  } & CSSProperties;\n}\n\nexport const Icon = (pr: IIcon) => {\n  const { className, children, disabled, onClick } = pr;\n  const CHND = pr.canHover && !pr.disabled;\n  const style: CSSProperties = removeUndefValuesFromObject({\n    ...(pr.style ?? {}),\n    '--fill': pr.style?.fill ?? null,\n    width: pr.style?.width,\n    height: pr.style?.height,\n    padding: pr.style?.padding,\n    margin: pr.style?.margin,\n    transform: !pr.rotate ? null : `rotate(${pr.rotate || 0}deg)`,\n    filter: !pr.disabled ? null : 'grayscale(1)',\n    '--outlinecolour': pr.outline || null,\n  });\n\n  return (\n    <IconF\n      {...pr}\n      className={className}\n      onClick={(e: React.MouseEvent<HTMLSpanElement, MouseEvent>) =>\n        !disabled && onClick?.(e)\n      }\n      style={style}\n      data-chnd={CHND}\n      data-hasoutline={pr.outline}\n      data-hasfill={!!pr.style?.fill}\n      data-type=\"iconbox\"\n    >\n      {children}\n    </IconF>\n  );\n};\n","'use client';\nimport styled from '@emotion/styled';\nimport React from 'react';\n\nimport { HorizontalDots } from '../../icons/HorizontalDots';\nimport { Icon } from '../Icon';\n\nconst IconStyled = styled(Icon)`\n  position: absolute;\n`;\n\nexport interface IKebabDots {\n  onClick?: () => Promise<void>;\n}\nexport const KebabDots = ({ onClick }: IKebabDots) => (\n  <IconStyled\n    style={{ width: '2rem', height: '2rem' }}\n    onClick={() => onClick?.()}\n    data-icon=\"kebab\"\n  >\n    {HorizontalDots}\n  </IconStyled>\n);\n"],"names":[],"sourceRoot":""}
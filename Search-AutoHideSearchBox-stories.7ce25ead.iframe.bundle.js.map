{"version":3,"file":"Search-AutoHideSearchBox-stories.7ce25ead.iframe.bundle.js","mappings":";;;;;;;AAgBA;;;AAIA;;;;;;;;AASA;;;;;;;;;AASA;;;AAUA","sources":["webpack://ag-common/./src/ui/components/Search/AutoHideSearchBox.tsx"],"sourcesContent":["'use client';\nimport styled from '@emotion/styled';\nimport React, { createRef, useState } from 'react';\n\nimport { useGranularEffect } from '../../helpers/useGranularHook';\nimport { CrossIcon, Magnify } from '../../icons';\nimport { bigScreen, smallScreen } from '../../styles';\nimport type { IRefTextEdit } from '../TextEdit';\nimport { SearchBox } from './SearchBox';\n\nconst Base = styled.div`\n  display: flex;\n  flex-flow: row;\n  align-items: center;\n  margin-left: 1rem;\n\n  @media ${bigScreen} {\n    width: 20rem;\n  }\n`;\nconst Icon = styled.div`\n  display: flex;\n  margin-right: 0.5rem;\n  > svg {\n    width: 1.2rem;\n    height: 1.2rem;\n    fill: white;\n  }\n`;\nconst SearchBoxStyled = styled(SearchBox)`\n  transition: width 200ms ease-in-out;\n\n  overflow: hidden;\n  padding: 0;\n  &[data-open='false'] {\n    width: 0;\n    padding: 0;\n  }\n  @media ${smallScreen} {\n    padding: 0;\n  }\n`;\nexport interface IAutoHideSearchBox {\n  searchText: string;\n  setSearchText: (val: string, enterPressed: boolean) => void;\n  onOpenToggle?: (open: boolean) => void;\n  className?: string;\n}\nexport const AutoHideSearchBox = (p: IAutoHideSearchBox) => {\n  const [open, setOpen] = useState(!!p.searchText);\n\n  const textEditRef = createRef<IRefTextEdit>();\n\n  useGranularEffect(\n    () => {\n      const newOpen = !!p.searchText;\n      if (newOpen !== open) {\n        setOpen(!open);\n        p.onOpenToggle?.(!open);\n      }\n    },\n    [p.searchText],\n    [open],\n  );\n  return (\n    <Base className={p.className} data-open={open}>\n      <Icon\n        style={{ cursor: 'pointer' }}\n        onClick={() => {\n          if (open) {\n            p.setSearchText('', false);\n          }\n          setOpen(!open);\n          p.onOpenToggle?.(!open);\n          if (!open) {\n            setTimeout(() => textEditRef.current?.focus(), 100);\n          }\n        }}\n      >\n        {open && <CrossIcon />}\n        {!open && <Magnify style={{ fill: 'white' }} />}\n      </Icon>\n      <SearchBoxStyled\n        textBoxRef={textEditRef}\n        {...p}\n        data-open={open}\n        setSearchText={(val, enter) => {\n          //we dont want empty enters to do anything\n          if (val === '' && enter) {\n            p.setSearchText(val, false);\n          } else {\n            p.setSearchText(val, enter);\n          }\n        }}\n      />\n    </Base>\n  );\n};\n"],"names":[],"sourceRoot":""}
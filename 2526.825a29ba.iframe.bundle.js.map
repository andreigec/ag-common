{"version":3,"file":"2526.825a29ba.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA;;;;;;;;;;;ACZA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;AAUA;;;;;;;AAAA;;AAIA;;;;ACrDA;;;;AAIA;;;;AAMA","sources":["webpack://ag-common/./src/ui/components/Close/index.tsx","webpack://ag-common/./src/ui/components/Modal/Modal.tsx","webpack://ag-common/./src/ui/components/Search/Modal.tsx"],"sourcesContent":["'use client';\nimport styled from '@emotion/styled';\nimport React from 'react';\n\nimport { filterDataProps } from '../../helpers/dom';\n\nconst Base = styled.div`\n  position: absolute;\n  z-index: 1;\n  width: 32px;\n  height: 32px;\n  opacity: 0.3;\n  cursor: pointer;\n  background-color: white;\n  top: 0;\n  right: 0;\n  &:hover {\n    opacity: 1;\n  }\n  &:before,\n  &:after {\n    position: absolute;\n    left: 15px;\n    content: ' ';\n    height: 33px;\n    width: 2px;\n    background-color: #333;\n  }\n  &:before {\n    transform: rotate(45deg);\n  }\n  &:after {\n    transform: rotate(-45deg);\n  }\n`;\nexport interface IClose {\n  onClick?: (ev: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n  className?: string;\n}\nexport const Close = (p: IClose) => (\n  <Base\n    {...filterDataProps(p)}\n    className={p.className}\n    onClick={(e) => p.onClick?.(e)}\n  />\n);\n","'use client';\nimport styled from '@emotion/styled';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { createPortal } from 'react-dom';\n\nimport { filterDataProps } from '../../helpers/dom';\nimport { useLockBodyScroll } from '../../helpers/useLockBodyScroll';\nimport { useOnClickOutside } from '../../helpers/useOnClickOutside';\nimport { bounce } from '../../styles';\nimport { Close } from '../Close';\nimport type { IModal } from './types';\n\nconst globalId = 'ag-modal-portal';\n\nconst FixedBackground = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  z-index: 2;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst ModalBase = styled.div`\n  display: flex;\n  position: absolute;\n  z-index: 1;\n  background-color: white;\n  border: solid 1px transparent;\n  border-radius: 0.5rem;\n  box-shadow:\n    0 1px 10px 0 rgba(0, 0, 0, 0.6),\n    0 2px 15px 0 rgba(0, 0, 0, 0.05);\n  max-width: 95vw;\n  max-height: 95vh;\n  overflow: hidden;\n  &[data-position='left'] {\n    left: 0;\n  }\n  &[data-position='right'] {\n    right: 0;\n  }\n  &[data-topposition='top'] {\n    top: 0;\n  }\n  &[data-topposition='bottom'] {\n    bottom: 0;\n  }\n  ${bounce('data-bounced')}\n`;\nexport const ModalItem = styled.div`\n  display: flex;\n  padding: 1rem;\n\n  &:hover {\n    background-color: #eee;\n  }\n`;\nconst CloseStyled = styled(Close)`\n  z-index: 1;\n`;\n\nexport const Modal = (p: IModal) => {\n  const {\n    open,\n    setOpen,\n    children,\n    position = 'left',\n    topPosition = 'top',\n    showCloseButton = true,\n    closeOnMoveMouseOutside = false,\n    className,\n    closeOnClickOutside = true,\n    portalId: pidraw,\n    style,\n  } = p;\n  let portalId = pidraw;\n  if (portalId === undefined) {\n    portalId = globalId;\n  }\n\n  useLockBodyScroll(p.open);\n  const [portalElem, setPortalElem] = useState<Element | undefined | null>();\n\n  useEffect(() => {\n    if (\n      portalId === null ||\n      document.querySelectorAll(`#${portalId}`).length > 0\n    ) {\n      return;\n    }\n    const d = document.createElement('div');\n    d.id = portalId;\n    d.style.position = 'fixed';\n    d.style.zIndex = '10';\n    document.body.appendChild(d);\n    return () => {\n      try {\n        document.querySelector(`#${portalId}`)?.remove();\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      } catch (e) {\n        //\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const [bounced, setBounced] = useState(false);\n  const ref = useRef<HTMLDivElement>(null);\n  useOnClickOutside(\n    {\n      disabled: !open,\n      ref,\n      moveMouseOutside: closeOnMoveMouseOutside,\n    },\n    (e) => {\n      //there might be multiple models open, only close the last one on the stack\n      if (portalElem) {\n        const myid = Array.prototype.indexOf.call(\n          portalElem.children,\n          //parent because fixed background is first\n          ref.current?.parentElement,\n        );\n        const childcount = portalElem.children.length;\n        if (myid + 1 !== childcount) {\n          return;\n        }\n      }\n      if (closeOnClickOutside && open) {\n        setOpen(false, e);\n        setBounced(false);\n      }\n    },\n  );\n\n  useEffect(() => {\n    if (!bounced && open) {\n      setBounced(true);\n    }\n  }, [open, bounced]);\n\n  useEffect(() => {\n    if (portalElem === undefined && portalId) {\n      setPortalElem(document.getElementById(portalId));\n    }\n  }, [portalElem, portalId]);\n\n  if (!open) {\n    return <></>;\n  }\n\n  const Content = (\n    <FixedBackground>\n      <ModalBase\n        {...filterDataProps(p)}\n        data-bounced={bounced}\n        data-position={position}\n        data-topposition={topPosition}\n        ref={ref}\n        className={className}\n        style={style}\n      >\n        {showCloseButton && (\n          <CloseStyled\n            data-type=\"modal-close\"\n            onClick={(e) => setOpen(false, e as unknown as Event)}\n          />\n        )}\n        {children}\n      </ModalBase>\n    </FixedBackground>\n  );\n  if (portalId && portalElem === undefined) {\n    return null;\n  }\n  if (portalId && portalElem) {\n    return createPortal(Content, portalElem);\n  }\n\n  return Content;\n};\n","'use client';\nimport styled from '@emotion/styled';\nimport React from 'react';\n\nimport { bigScreen, smallScreen } from '../../styles';\nimport { Modal } from '../Modal/Modal';\nimport { SearchInline } from './Inline';\nimport type { ISearchModal } from './types';\n\nconst ModalStyled = styled(Modal)`\n  display: flex;\n  flex-flow: column;\n  top: 10rem;\n  @media ${bigScreen} {\n    width: 50vw;\n    max-width: 60rem;\n  }\n  @media ${smallScreen} {\n    width: 100%;\n    max-width: 95vw;\n  }\n`;\n\nexport const SearchModal = <T,>(p: ISearchModal<T>) => (\n  <ModalStyled\n    position=\"center\"\n    topPosition=\"center\"\n    open={true}\n    setOpen={() => p.onSelectItem?.(undefined)}\n    showCloseButton={false}\n    closeOnClickOutside={true}\n  >\n    <SearchInline<T> {...p} />\n  </ModalStyled>\n);\n"],"names":[],"sourceRoot":""}
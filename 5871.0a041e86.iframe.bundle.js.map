{"version":3,"file":"5871.0a041e86.iframe.bundle.js","mappings":";;AAcA;;AAgBA;;ACfA;;ACKA;;ACRA;;;;;;;;;ACSA;;;;;;AAQA;;;AAKA;;;;AAMA;;;;AAMA","sources":["webpack://ag-common/./src/ui/components/OpenApiCodeBlock/helpers/common.ts","webpack://ag-common/./src/ui/components/OpenApiCodeBlock/curl/index.tsx","webpack://ag-common/./src/ui/components/OpenApiCodeBlock/fetch/helpers/req.tsx","webpack://ag-common/./src/ui/components/OpenApiCodeBlock/fetch/index.tsx","webpack://ag-common/./src/ui/components/OpenApiCodeBlock/OpenApiCodeBlock.tsx"],"sourcesContent":["'use client';\nimport styled from '@emotion/styled';\n\nimport type {\n  IOpenApi,\n  IOpenApiCodeBlock,\n  IOpenApiOperation,\n  IOpenApiOperationBlock,\n} from '../types';\n\nexport const Highlight = styled.span`\n  color: green;\n`;\n\nexport const Highlight2 = styled.span`\n  color: indianred;\n`;\n\nconst indexOfNumber = (str: string, char: string, num = 0) => {\n  let ret = -1;\n  for (let c = 0; c <= num; c += 1) {\n    ret = str.indexOf(char, ret + 1);\n  }\n\n  if (ret === -1) {\n    return undefined;\n  }\n  return ret;\n};\n\nconst getApiUrl = <TDefaultApi>(p: IOpenApiCodeBlock<TDefaultApi>) => {\n  return p.schema.servers[0].url;\n};\n\nconst getFunctionName = <TDefaultApi>(p: IOpenApiCodeBlock<TDefaultApi>) => {\n  let ret = p.funcF.toString();\n  const i1 = ret.indexOf('.') + 1;\n  const i2 = ret.indexOf('(', i1);\n  ret = ret.substring(i1, i2);\n  return ret;\n};\n\nexport const getOperation = <TDefaultApi>(\n  p: IOpenApiCodeBlock<TDefaultApi>,\n): IOpenApiOperationBlock => {\n  let path: string | undefined;\n  let verb: string | undefined;\n  const func = getFunctionName(p);\n  Object.entries(p.schema.paths).forEach(([pathN, ops]) =>\n    Object.entries(ops).forEach(([verbN, op]) => {\n      //openapi codegen gives raw fn, match that as well\n      if (op.operationId === func || op.operationId + 'Raw' === func) {\n        path = pathN;\n        verb = verbN;\n      }\n    }),\n  );\n\n  if (!path || !verb) {\n    return {\n      error: 'operation not found',\n    } as any;\n  }\n\n  const operation = p.schema.paths[path][verb];\n\n  return { operation, verb, path, fullApiUrl: getApiUrl(p) };\n};\n\nexport const getBodyJson = <TDefaultApi>(\n  p: IOpenApiCodeBlock<TDefaultApi>,\n): { nice: string; raw: string } | undefined => {\n  const body = p.funcF.toString();\n  const bstart = indexOfNumber(body, '(', 1);\n  const bend = !bstart ? undefined : body.lastIndexOf(')');\n  if (!bstart || !bend) {\n    return undefined;\n  }\n\n  //no body required\n  if (bend - bstart === 1) {\n    return undefined;\n  }\n\n  const raw = body.substring(bstart + 1, bend);\n  const cleaned = raw\n    .replace(/([a-zA-Z0-9-]+[^\"]):/gim, '\"$1\":')\n    .replace(/'/gim, '\"');\n\n  const nice = JSON.stringify(JSON.parse(cleaned), null, 2);\n\n  return { nice, raw };\n};\n\nexport const getSecurity = (\n  p: { apiKey?: string; schema: IOpenApi },\n  { operation }: { operation: IOpenApiOperation },\n) => {\n  const security1 = operation.security?.[0];\n  const security2 = !security1 ? undefined : Object.keys(security1)[0];\n  const security = !security2\n    ? undefined\n    : p.schema.components.securitySchemes[security2];\n\n  if (security) {\n    if (security.in !== 'header') {\n      return null;\n    }\n    return security;\n  }\n  return undefined;\n};\n","'use client';\nimport styled from '@emotion/styled';\nimport type { JSX } from 'react';\nimport React from 'react';\n\nimport { notEmpty } from '../../../../common/helpers/array';\nimport { Highlight } from '../helpers/common';\nimport { joinJsxWithSlash } from '../helpers/joinJsx';\nimport type { IOpenApiCodeBlock, IOpenApiOperationBlock } from '../types';\nimport { getCurlLines } from './helpers/getCurlLines';\n\nconst Base = styled.div`\n  white-space: pre;\n`;\n\nexport const Curl = <TDefaultApi,>({\n  ops,\n  p,\n}: {\n  p: IOpenApiCodeBlock<TDefaultApi>;\n  ops: IOpenApiOperationBlock;\n}) => {\n  const { fullApiUrl, headerLines, bodyLine } = getCurlLines(ops, p);\n  const { verb } = ops;\n  const rows: JSX.Element[] = [\n    <>curl --request {verb.toUpperCase()}</>,\n    <>\n      --url <Highlight>&apos;{fullApiUrl}&apos;</Highlight>\n    </>,\n    ...(headerLines ?? []),\n    bodyLine,\n  ].filter(notEmpty);\n\n  return <Base>{joinJsxWithSlash(rows)}</Base>;\n};\n","'use client';\nimport styled from '@emotion/styled';\nimport type { JSX } from 'react';\nimport React from 'react';\n\nimport {\n  getBodyJson,\n  getSecurity,\n  Highlight,\n  Highlight2,\n} from '../../helpers/common';\nimport { joinJsxWithComma } from '../../helpers/joinJsx';\nimport type { IOpenApiCodeBlock, IOpenApiOperationBlock } from '../../types';\n\nconst rb = <>&#125;</>;\nconst lb = <>&#123;</>;\nconst Lpad = styled.div`\n  padding-left: 0.5rem;\n`;\n\nexport const getRequestOptions = <TDefaultApi,>(\n  p: IOpenApiCodeBlock<TDefaultApi>,\n  ops: IOpenApiOperationBlock,\n): JSX.Element | undefined => {\n  const { nice } = getBodyJson(p) ?? {};\n  if (!nice) {\n    return undefined;\n  }\n\n  const sec = getSecurity(p, ops);\n  const h1 = (\n    <>\n      {' '}\n      <Highlight>&apos;Content-Type&apos;</Highlight>:{' '}\n      <Highlight>&apos;application/json&apos;</Highlight>\n    </>\n  );\n\n  let h2: JSX.Element | undefined;\n  if (sec) {\n    h2 = (\n      <>\n        {' '}\n        <Highlight>&apos;{sec.name}&apos;</Highlight>:{' '}\n        <Highlight>&apos;{p.apiKey || '(API KEY)'}&apos;</Highlight>\n      </>\n    );\n  }\n\n  const header = !sec ? (\n    <></>\n  ) : (\n    <>\n      headers: {lb}\n      <Lpad>{joinJsxWithComma([h1, h2])}</Lpad>\n      {rb},\n    </>\n  );\n\n  const body = (\n    <>\n      body: <Highlight2>JSON</Highlight2>.<Highlight>stringify</Highlight>(\n      {nice})\n    </>\n  );\n\n  const content = (\n    <>\n      const requestOptions = {lb}\n      <Lpad>\n        method: <Highlight>&apos;{ops.verb.toUpperCase()}&apos;</Highlight>,\n        <br />\n        {header}\n        <br />\n        {body}\n        <br />\n      </Lpad>\n      {rb};\n    </>\n  );\n\n  return content;\n};\n","'use client';\nimport styled from '@emotion/styled';\nimport React from 'react';\n\nimport type { IOpenApiCodeBlock, IOpenApiOperationBlock } from '../types';\nimport { getFetchCall } from './helpers/call';\nimport { getFetchLines } from './helpers/getFetchLines';\n\nconst Base = styled.div`\n  white-space: pre;\n`;\n\nexport const Fetch = <TDefaultApi,>({\n  ops,\n  p,\n}: {\n  p: IOpenApiCodeBlock<TDefaultApi>;\n  ops: IOpenApiOperationBlock;\n}) => {\n  const { reqContent } = getFetchLines(ops, p);\n  const x = getFetchCall(p, ops);\n\n  return (\n    <Base>\n      {reqContent}\n      <br />\n      <br />\n      {x}\n    </Base>\n  );\n};\n","'use client';\nimport styled from '@emotion/styled';\nimport React from 'react';\n\nimport { FlexRow } from '../FlexRow';\nimport { Curl } from './curl';\nimport { Fetch } from './fetch';\nimport { getOperation } from './helpers/common';\nimport type { IOpenApiCodeBlock } from './types';\n\nconst Base = styled.div`\n  display: flex;\n  flex-flow: column;\n  width: calc(100% - 2rem);\n  flex-grow: 1;\n  border: solid 1px #333;\n  padding: 1rem;\n  overflow-y: auto;\n  max-height: calc(100% - 2rem);\n`;\n\nconst Verb = styled.div`\n  background-color: #333;\n  color: white;\n  margin-right: 0.5rem;\n  padding: 0.25rem;\n  font-size: 0.8rem;\n`;\n\nconst ApiName = styled.div`\n  font-weight: bold;\n  font-size: 1.5rem;\n`;\n\nconst BlockTitle = styled.div`\n  color: #333;\n  font-size: 1.2rem;\n  margin-top: 2rem;\n`;\n\nconst Block = styled.div`\n  background-color: rgba(0, 0, 0, 0.1);\n  padding: 1rem;\n  margin-top: 0.5rem;\n`;\n\nexport const OpenApiCodeBlock = <TDefaultApi,>(\n  p: IOpenApiCodeBlock<TDefaultApi>,\n) => {\n  const ops = getOperation(p);\n\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  if (ops.error || !ops.verb || !ops.operation) {\n    return <Base>{ops.error}</Base>;\n  }\n\n  const { verb, operation, path } = ops;\n\n  return (\n    <Base>\n      <FlexRow center noGrow>\n        <Verb>{verb}</Verb>\n        <ApiName>{operation.description ?? path}</ApiName>\n      </FlexRow>\n      <BlockTitle>Definition</BlockTitle>\n      <Block>\n        {verb.toUpperCase()} {path}\n      </Block>\n      <BlockTitle>Example curl Request</BlockTitle>\n      <Block>\n        <Curl ops={ops} p={p} />\n      </Block>\n      <BlockTitle>Example fetch Request</BlockTitle>\n      <Block>\n        <Fetch ops={ops} p={p} />\n      </Block>\n    </Base>\n  );\n};\n"],"names":[],"sourceRoot":""}
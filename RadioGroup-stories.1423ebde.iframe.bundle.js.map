{"version":3,"file":"RadioGroup-stories.1423ebde.iframe.bundle.js","mappings":";;;;;;;;AAgBA;;;;;;;;;;;AA2BA","sources":["webpack://ag-common/./src/ui/components/RadioGroup/index.tsx"],"sourcesContent":["'use client';\nimport styled from '@emotion/styled';\nimport type { CSSProperties } from 'react';\nimport type { JSX } from 'react';\nimport React, { useState } from 'react';\n\nconst Base = styled.div`\n  display: flex;\n  flex-flow: row;\n  &[data-mode='vert'] {\n    flex-flow: column;\n  }\n  overflow: hidden;\n  justify-content: space-between;\n`;\n\nconst Label = styled.label`\n  text-align: center;\n  display: flex;\n  align-items: center;\n\n  &[data-selected='true'] {\n    cursor: default;\n  }\n  &[data-selected='false'] {\n    cursor: pointer;\n  }\n`;\n\nexport interface IRadioGroup<T> {\n  /**\n   * can overload the render of the label. defaults to toString\n   */\n  renderLabel?: (a: T, selected: boolean) => JSX.Element;\n  defaultIndex: number;\n  onSubmit: (val: T, index: number) => void;\n  values: T[];\n  className?: string;\n  style?: CSSProperties;\n  /** default horiz */\n  mode?: 'vert' | 'horiz';\n}\n\nexport const RadioGroup = <T,>(p: IRadioGroup<T>) => {\n  const { renderLabel = (x) => (x as any).toString() } = p;\n  const [index, setIndex] = useState<number>(p.defaultIndex);\n\n  return (\n    <Base className={p.className} style={p.style} data-mode={p.mode ?? 'horiz'}>\n      {p.values.map((v, i) => (\n        <Label\n          // eslint-disable-next-line react/no-array-index-key\n          key={i.toString()}\n          data-selected={index === i}\n          onClick={() => {\n            if (index === i) {\n              return;\n            }\n            setIndex(i);\n            p.onSubmit(v, i);\n          }}\n        >\n          {renderLabel(v, index === i)}\n        </Label>\n      ))}\n    </Base>\n  );\n};\n"],"names":[],"sourceRoot":""}
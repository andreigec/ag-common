{"version":3,"file":"4135.139ac893.iframe.bundle.js","mappings":";;;;;AAcA;;;;AAgBA;;;ACHA","sources":["webpack://ag-common/./src/ui/components/Chevron/index.tsx","webpack://ag-common/./src/ui/helpers/useTooltip.tsx"],"sourcesContent":["'use client';\nimport styled from '@emotion/styled';\nimport React from 'react';\n\nimport { ChevronRight } from '../../icons/ChevronRight';\nimport { Icon } from '../Icon';\n\nconst Base = styled.span`\n  font-size: 2rem;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst IconStyled = styled(Icon)`\n  cursor: pointer;\n  margin: 0;\n  padding: 0;\n`;\nexport interface IChevron {\n  /**\n   * default right\n   */\n  point: 'up' | 'down' | 'left' | 'right';\n  colour?: string;\n  className?: string;\n  width?: string;\n  onToggle?: () => void;\n}\n\nexport const Chevron = ({\n  width = '1.2rem',\n  className,\n  colour = 'black',\n  onToggle,\n  point = 'right',\n}: IChevron) => {\n  let rotate = 0;\n  switch (point) {\n    case 'down': {\n      rotate = 90;\n      break;\n    }\n\n    case 'left': {\n      rotate = 180;\n      break;\n    }\n\n    case 'up': {\n      rotate = 270;\n      break;\n    }\n\n    case 'right': {\n      rotate = 0;\n    }\n  }\n\n  return (\n    <Base\n      className={className}\n      onClick={() => onToggle?.()}\n      onTouchStart={() => onToggle?.()}\n      onKeyDown={(e) => e.key === 'Enter' && onToggle?.()}\n    >\n      <IconStyled\n        rotate={rotate}\n        style={{ width, height: width, fill: colour }}\n      >\n        {ChevronRight}\n      </IconStyled>\n    </Base>\n  );\n};\n","import styled from '@emotion/styled';\nimport type { MouseEvent } from 'react';\nimport type { JSX } from 'react';\nimport React, { createRef, useEffect, useState } from 'react';\nimport { createPortal } from 'react-dom';\n\nconst Base = styled.div`\n  position: absolute;\n  z-index: 10;\n`;\n\ninterface IPos<T> {\n  cursor: MouseEvent;\n  data: T;\n  portalId: string;\n  hasParent: boolean;\n  parentWidth: number;\n  parentHeight: number;\n  x: number;\n  y: number;\n}\n\ninterface IPosSize {\n  tooltipWidth: number;\n  tooltipHeight: number;\n}\n\nconst Comp = <T,>({\n  pos,\n  children,\n}: {\n  pos: IPos<T> | undefined;\n  children: (pos: IPos<T>, size?: IPosSize) => JSX.Element;\n}) => {\n  const ref = createRef<HTMLDivElement>();\n  const [size, setSize] = useState<IPosSize>();\n\n  useEffect(() => {\n    if (!ref.current || size) {\n      return;\n    }\n    const tooltipWidth = Math.max(\n      ref.current.clientWidth,\n      ref.current.scrollWidth,\n    );\n    const tooltipHeight = Math.max(\n      ref.current.clientHeight,\n      ref.current.scrollHeight,\n    );\n    if (tooltipHeight === 0 || tooltipWidth === 0) {\n      return;\n    }\n    setSize({\n      tooltipWidth,\n      tooltipHeight,\n    });\n  }, [ref, size]);\n\n  if (!pos) {\n    return null;\n  }\n\n  let left: number | undefined;\n  let right: number | undefined;\n  let top: number | undefined;\n  let bottom: number | undefined;\n  const gap = 5;\n  if (size) {\n    left = pos.x + gap;\n    const newRight = pos.parentWidth - pos.x + gap;\n\n    if (pos.x + gap + size.tooltipWidth > pos.parentWidth) {\n      left = undefined;\n      right = newRight;\n    }\n    //\n    top = pos.y + gap;\n\n    if (top + size.tooltipHeight > pos.parentHeight) {\n      if (pos.hasParent) {\n        top = undefined;\n      } else {\n        top = pos.parentHeight - size.tooltipHeight;\n      }\n\n      bottom = pos.parentHeight - pos.y;\n    }\n\n    if (right && right + size.tooltipWidth > pos.parentWidth) {\n      if (pos.hasParent) {\n        right = undefined;\n      }\n      left = 0;\n    }\n\n    if (bottom && bottom + size.tooltipHeight > pos.parentHeight) {\n      if (pos.hasParent) {\n        bottom = undefined;\n      }\n      top = 0;\n    }\n  }\n\n  const Content = (\n    <Base\n      data-type=\"tooltip-content\"\n      ref={ref}\n      style={{\n        left,\n        right,\n        top,\n        bottom,\n        ...(!pos.hasParent && { position: 'fixed' }),\n        ...(!size && { zIndex: -1 }),\n      }}\n    >\n      {children(pos, size)}\n    </Base>\n  );\n  const e = document.querySelector(`#${pos.portalId}`) as Element | undefined;\n  if (!pos.hasParent && e) {\n    return createPortal(Content, e);\n  }\n  return Content;\n};\n\ntype ITooltipProps = {\n  /** default 'ag-tooltip-portal' */\n  portalId: string;\n};\n\nexport interface IUseTooltip<T> {\n  Comp: <T>({\n    pos,\n    children,\n  }: {\n    pos: IPos<T> | undefined;\n    children: (pos: IPos<T>, size?: IPosSize) => JSX.Element;\n  }) => JSX.Element | null;\n  setPos: (\n    p?:\n      | {\n          element: MouseEvent;\n          parent: Element | null;\n          data: T;\n        }\n      | undefined,\n  ) => void;\n  pos: IPos<T> | undefined;\n}\n\nexport const useTooltip = <T,>(p?: ITooltipProps): IUseTooltip<T> => {\n  const portalId = p?.portalId || 'ag-tooltip-portal';\n  const [pos, setPosRaw] = useState<IPos<T>>();\n\n  useEffect(() => {\n    if (document.querySelectorAll(`#${portalId}`).length > 0) {\n      return;\n    }\n    const d = document.createElement('div');\n    d.id = portalId;\n    document.body.appendChild(d);\n    return () => {\n      try {\n        document.querySelector(`#${portalId}`)?.remove();\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      } catch (e) {\n        //\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const setPos = (p?: {\n    element: MouseEvent;\n    parent: Element | null;\n    data: T;\n  }) => {\n    if (!p) {\n      setPosRaw(undefined);\n      return;\n    }\n\n    let parentTop = 0;\n    let parentLeft = 0;\n    let parentWidth = document.body.clientWidth;\n    let parentHeight = document.body.clientHeight;\n    let x = 0;\n    let y = 0;\n\n    if (p.parent) {\n      ({\n        top: parentTop,\n        left: parentLeft,\n        width: parentWidth,\n        height: parentHeight,\n      } = p.parent.getBoundingClientRect());\n      x = p.element.pageX - parentLeft;\n      y = p.element.pageY - parentTop;\n    } else {\n      parentWidth = window.innerWidth;\n      parentHeight = window.innerHeight;\n      x = p.element.clientX;\n      y = p.element.clientY;\n    }\n\n    const p2 = {\n      cursor: p.element,\n      data: p.data,\n      parentWidth,\n      parentHeight,\n      x,\n      y,\n      hasParent: !!p.parent,\n      portalId,\n    };\n\n    setPosRaw(p2);\n  };\n\n  return {\n    Comp,\n    setPos,\n    pos,\n  };\n};\n"],"names":[],"sourceRoot":""}
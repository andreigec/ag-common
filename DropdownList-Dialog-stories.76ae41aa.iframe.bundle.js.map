{"version":3,"file":"DropdownList-Dialog-stories.76ae41aa.iframe.bundle.js","mappings":";;AAYA;AAGA;;;;;;AAoBA;;AAGA;;;;AAMA;;;;;;AAwBA;;;AAyBA;;;;;;;;AAZA;AAYA","sources":["webpack://ag-common/./src/ui/styles/common.tsx"],"sourcesContent":["'use client';\nimport { css } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport type { CSSProperties } from 'react';\n\nimport { colours } from './colours';\n\n/** function that returns css that gives a text outline drop shadow.\n * @param outlineColour default='white'\n * @param sizePx default = 1px\n */\nexport const HardOutline = (outlineColour = 'white', sizePx = 1) => css`\\\nfilter: ${HardOutlineFilter(outlineColour, sizePx)};\n`;\n\nexport const HardOutlineFilter = (outlineColour = 'white', sizePx = 1) => {\n  const px = `${sizePx}px`;\n\n  return `drop-shadow(${px} ${px} 0px ${outlineColour})\n  drop-shadow(-${px} ${px} 0px ${outlineColour})\n  drop-shadow(${px} -${px} 0px ${outlineColour})\n  drop-shadow(-${px} -${px} 0px ${outlineColour})`;\n};\n\n/** disable user text selection */\nexport const NoTextSelect = css`\n  user-select: none; /* supported by Chrome and Opera */\n  -webkit-user-select: none; /* Safari */\n  -khtml-user-select: none; /* Konqueror HTML */\n  -moz-user-select: none; /* Firefox */\n  -ms-user-select: none; /* Internet Explorer/Edge */\n`;\n\n/** enable text overflow\n * @param lines number of lines before overflow\n */\nexport const TextOverflowEllipsis = (lines: number) => css`\n  display: -webkit-box;\n  -webkit-line-clamp: ${lines};\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\n/** stop dragging of element */\nexport const noDrag: {\n  draggable: boolean;\n  onDragStart: React.DragEventHandler<HTMLDivElement>;\n  onTouchStart: React.TouchEventHandler<HTMLDivElement>;\n} = {\n  draggable: false,\n  onDragStart: (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n  },\n  onTouchStart: (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n  },\n};\n\n/** apply bounce effect given a condition */\nexport const bounce = (bounceattr: string) => css`\n  transition:\n    opacity 0.2s ease,\n    transform 0.2s cubic-bezier(0.02, 1.5, 0.74, 1.23);\n  transform-origin: 50% 50%;\n  transform: translateY(-5px);\n  &[${bounceattr}='true'] {\n    transform: translateY(0);\n  }\n`;\n\nexport const Card = styled.div`\n  background-color: white;\n  margin: 0.5rem;\n\n  position: relative;\n  border-radius: 0.5rem;\n  max-width: 40rem;\n  padding: 1rem;\n  border: solid 2px ${colours.lighter};\n`;\n\nexport interface IVarStyles {\n  /** default var(--main-fg) */\n  color: string;\n  /** default var(--main-bg) */\n  backgroundColor: string;\n  /** default var(--main-bg-mid) */\n  borderColor: string;\n}\n\nexport const getVarStyles = (\n  raw?: Partial<IVarStyles & CSSProperties>,\n): IVarStyles => ({\n  ...raw,\n  color: raw?.color ?? 'var(--main-fg)',\n  backgroundColor: raw?.backgroundColor ?? 'var(--main-bg)',\n  borderColor: raw?.borderColor ?? 'var(--main-bg-mid)',\n});\n"],"names":[],"sourceRoot":""}
{"version":3,"file":"4864.8432e891.iframe.bundle.js","mappings":";;;;;;AAqBA;;;AAKA;;;;;;;;;;;;;;;AAeA;;;;AAMA;;;;;;;;;;;;;AAeA;;;;;;;;;;ACzCA;;;;;;AAQA;;;;;;AAQA;;;AAGA;;;AAKA;;;;AAgBA;;;;;;;;;;;;;;;;;;;;;;AChCA;;;AAKA;;;AAKA;;AAIA;;;;;AAKA;;;AAKA","sources":["webpack://ag-common/./src/ui/components/Search/Inline.tsx","webpack://ag-common/./src/ui/components/Search/SearchBox.tsx","webpack://ag-common/./src/ui/styles/standaloneStyles.ts"],"sourcesContent":["'use client';\nimport styled from '@emotion/styled';\nimport React, {\n  cloneElement,\n  useImperativeHandle,\n  useRef,\n  useState,\n} from 'react';\n\nimport { take } from '../../../common/helpers/array';\nimport { smallScreen } from '../../styles';\nimport type { IRefTextEdit } from '../TextEdit/types';\nimport { SearchBox } from './SearchBox';\nimport type { ISearchDialog } from './types';\n\nconst Base = styled.div`\n  display: flex;\n  flex-flow: column;\n  flex-grow: 1;\n  width: 100%;\n  height: calc(100% - 1rem);\n  @media ${smallScreen} {\n    height: calc(100% - 0.5rem);\n  }\n`;\n\nconst Content = styled.div`\n  width: calc(100% - 2rem);\n  margin: auto;\n  display: flex;\n  flex-flow: column;\n  justify-content: flex-start;\n  align-items: center;\n  max-height: 100%;\n  overflow-y: auto;\n  overflow-x: hidden;\n\n  flex-grow: 1;\n  &[data-hasitems='true'] {\n    padding-bottom: 0.5rem;\n  }\n  @media ${smallScreen} {\n    margin: 0;\n    width: calc(100% - 0.5rem);\n  }\n`;\n\nconst RowCount = styled.div`\n  width: 100%;\n  text-align: center;\n  width: fit-content;\n  text-decoration-color: currentcolor;\n  text-decoration: underline;\n\n  &[data-top='true'] {\n    padding-bottom: 0.5rem;\n  }\n  &[data-top='false'] {\n    padding-top: 0.5rem;\n  }\n`;\n\nexport const SearchInline = <T,>(p: ISearchDialog<T>) => {\n  const { maxDisplayItems = 1000 } = p;\n  const rowCountOptDisplay = p.rowCountOpt?.display ?? 'bottom';\n  const [searchText, setSearchText] = useState(p.defaultValue ?? '');\n\n  useImperativeHandle(p.textBoxRef, () => ({\n    setValue: (v) => {\n      const value = textBoxRef.current?.getValue();\n      if (v === value) {\n        return;\n      }\n      textBoxRef.current?.setValue(v);\n      setSearchText(v);\n    },\n    focus: () => textBoxRef.current?.focus(),\n    getValue: () => textBoxRef.current?.getValue(),\n  }));\n  const textBoxRef = useRef<IRefTextEdit>(null);\n\n  const resWrap = (foundItem: T | undefined, target: EventTarget) => {\n    if (!foundItem) {\n      p.onSelectItem?.(undefined);\n    } else {\n      p.onSelectItem?.({ foundItem, searchText, target });\n    }\n  };\n\n  const filteredItemsRaw = p.displayItems.filter((i) =>\n    p.willDisplayItem(searchText, i),\n  );\n\n  const { part: filteredItems } = take(\n    filteredItemsRaw,\n    maxDisplayItems < 0 ? filteredItemsRaw.length : maxDisplayItems,\n  );\n  const outdiff = filteredItems.length !== p.displayItems.length;\n  const showText =\n    p.texts?.totalItems?.(filteredItems.length, p.displayItems.length) ??\n    `Showing ${filteredItems.length} out of ${p.displayItems.length} total\n  items`;\n\n  return (\n    <Base className={p.className}>\n      <SearchBox\n        {...p}\n        searchText={searchText}\n        setSearchText={(t) => {\n          setSearchText(t);\n          p.onSearchTextChange?.(t);\n        }}\n        textBoxRef={textBoxRef}\n      />\n      <Content data-hasitems={!!filteredItems.length} data-type=\"content\">\n        {rowCountOptDisplay === 'top' && outdiff && (\n          <RowCount data-top=\"true\">{showText}</RowCount>\n        )}\n        {filteredItems.map((item, index) =>\n          cloneElement(p.renderItem({ searchText, item, index }), {\n            onClick: (e: any) => resWrap(item, e.target),\n          }),\n        )}\n        {rowCountOptDisplay === 'bottom' && outdiff && (\n          <RowCount data-top=\"false\">{showText}</RowCount>\n        )}\n      </Content>\n    </Base>\n  );\n};\n","'use client';\nimport styled from '@emotion/styled';\nimport React, { createRef, useEffect, useRef } from 'react';\n\nimport { debounce } from '../../helpers/debounce';\nimport { filterDataProps } from '../../helpers/dom';\nimport { CrossIcon, Magnify } from '../../icons';\nimport { bigScreen, smallScreen } from '../../styles';\nimport type { IRefTextEdit } from '../TextEdit';\nimport { TextEdit } from '../TextEdit';\n\nconst Base = styled.div`\n  padding: 1rem;\n  display: flex;\n  flex-flow: row;\n  justify-content: center;\n  align-items: center;\n  width: calc(100% - 2rem);\n  margin: auto;\n  position: relative;\n\n  @media ${smallScreen} {\n    padding: 0.5rem;\n    margin: 0;\n    width: calc(100% - 1rem);\n    max-height: calc(100% - 1rem);\n  }\n`;\n\nconst MagnifyIcon = styled.div`\n  width: 1.5rem;\n  height: 1.5rem;\n  margin-right: 0.5rem;\n  cursor: pointer;\n  margin-left: 0.5rem;\n`;\n\nconst CrossIconStyled = styled(CrossIcon)`\n  position: absolute;\n  right: 1rem;\n  @media ${bigScreen} {\n    right: 2rem;\n  }\n`;\n\nconst TextEditStyled = styled(TextEdit)`\n  padding: 0;\n  height: 2.5rem;\n  background-color: white;\n`;\nexport interface ISearchBox {\n  placeholderText?: string;\n  searchText: string;\n  setSearchText: (val: string, enterPressed: boolean) => void;\n  className?: string;\n  textBoxRef?: React.RefObject<IRefTextEdit | null>;\n  /**\n   * if truthy will enable text edit mode by default. if focus is true, will also focus on open\n   */\n  defaultEditing?: { focus?: boolean };\n}\nexport const SearchBox = (p: ISearchBox) => {\n  const ur = useRef(p.textBoxRef);\n  const cr = createRef<IRefTextEdit>();\n\n  const textBoxRef = (!p.textBoxRef ? cr : ur) as unknown as\n    | React.RefObject<IRefTextEdit | null>\n    | undefined;\n\n  useEffect(() => {\n    if (\n      !textBoxRef?.current ||\n      textBoxRef.current.getValue() === p.searchText\n    ) {\n      return;\n    }\n\n    textBoxRef.current.setValue(p.searchText);\n\n    p.setSearchText(p.searchText, true);\n  }, [p, textBoxRef]);\n\n  return (\n    <Base data-type=\"search\" className={p.className} {...filterDataProps(p)}>\n      <TextEditStyled\n        ref={textBoxRef}\n        defaultValue={p.searchText}\n        placeholder={p.placeholderText}\n        defaultEditing={{ focus: true, ...p.defaultEditing }}\n        singleLine\n        leftContent={\n          <MagnifyIcon\n            onClick={() =>\n              p.setSearchText(textBoxRef?.current?.getValue() || '', true)\n            }\n          >\n            <Magnify />\n          </MagnifyIcon>\n        }\n        allowUndo={false}\n        onClickOutsideWithNoValue={null}\n        onSubmit={(v, enterPressed) =>\n          debounce(\n            () => {\n              p.setSearchText(v, enterPressed);\n            },\n            { key: 'pagesearch', time: 200 },\n          )\n        }\n      />\n      {p.searchText && (\n        <CrossIconStyled\n          onClick={() => {\n            textBoxRef?.current?.setValue('');\n            p.setSearchText('', true);\n          }}\n        />\n      )}\n    </Base>\n  );\n};\n","'use client';\nimport styled from '@emotion/styled';\n\nimport { smallScreen } from './media';\n\nexport const SOBase = styled.div`\n  display: flex;\n  width: 100%;\n  flex-grow: 1;\n  flex-flow: column;\n  overflow: hidden;\n  align-content: flex-start;\n  align-items: flex-start;\n\n  > h1,\n  h2,\n  > p {\n    white-space: pre-wrap;\n    font-size: 1.2rem;\n  }\n  h1,\n  h2 {\n    font-weight: normal;\n    font-size: 2rem;\n    flex-basis: 100%;\n    margin: 0;\n  }\n`;\n\nexport const SOBR = styled.div`\n  height: 0.5rem;\n  width: 0.5rem;\n`;\n\nexport const SOB = styled.div`\n  font-size: 1.4em;\n  font-weight: bold;\n`;\n\nexport const SOP = styled.div`\n  margin-bottom: 1rem;\n`;\n\nexport const SOCenter = styled.div`\n  display: flex;\n  flex-flow: column;\n  margin-left: auto;\n  margin-right: auto;\n  @media ${smallScreen} {\n    width: calc(100% - 2rem);\n  }\n`;\n\nexport const SOA = styled.a`\n  width: fit-content;\n  color: rgb(125, 171, 255);\n  text-decoration: none;\n  &:hover {\n    text-decoration: underline;\n  }\n  &[data-inline='true'] {\n    display: inline-block;\n    margin-left: 5px;\n    margin-right: 5px;\n  }\n  &[data-inline='false'] {\n    display: flex;\n    margin: auto;\n  }\n`;\n"],"names":[],"sourceRoot":""}
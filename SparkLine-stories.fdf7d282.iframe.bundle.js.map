{"version":3,"file":"SparkLine-stories.fdf7d282.iframe.bundle.js","mappings":";;;;;;;;;AAmBA;;AAZA;AAAA;AAAA;AAmBA;;AAnBA;AAmCA","sources":["webpack://ag-common/./src/ui/components/SparkLine/index.tsx"],"sourcesContent":["'use client';\nimport styled from '@emotion/styled';\nimport React from 'react';\n\nimport { distinctBy } from '../../../common/helpers/array';\nimport { rangePercentage } from '../../../common/helpers/math';\n\nconst barWidth = 2;\nconst Base = styled.div`\n  width: calc(100% - 1px);\n  height: calc(100% - 1px);\n  border: solid 1px #666;\n  padding: 0;\n  display: flex;\n  justify-content: center;\n  align-items: flex-end;\n  overflow: hidden;\n`;\n\nconst Points = styled.div`\n  position: relative;\n  width: calc(100% - ${barWidth}px);\n  height: calc(100% - ${barWidth}px);\n  margin-left: ${barWidth}px;\n`;\n\nconst Point = styled.div`\n  position: absolute;\n  width: ${barWidth}px;\n`;\n\nexport interface ISparkLine {\n  /**\n   * default #4d76ff\n   */\n  pointColour?: string;\n  className?: string;\n  data: TSparkLineData[];\n  pointTitleF?: (p: TSparkLineData) => string;\n  title?: string;\n}\nexport type TSparkLineData = { x: number; y: number };\nexport const SparkLine = (p: ISparkLine) => {\n  const { data: raw, pointColour = '#4d76ff' } = p;\n  const xMin = Math.min(...raw.map((d) => d.x));\n  const xMax = Math.max(...raw.map((d) => d.x));\n  const yMin = Math.min(...raw.map((d) => d.y));\n  const yMax = Math.max(...raw.map((d) => d.y));\n  const data = distinctBy(\n    raw.map((orig) => ({\n      x:\n        rangePercentage({\n          value: orig.x,\n          min: xMin,\n          max: xMax,\n        }) * 100,\n      y:\n        rangePercentage({\n          value: orig.y,\n          min: yMin,\n          max: yMax,\n        }) * 100,\n      orig,\n    })),\n    (s) => s.x,\n  );\n\n  return (\n    <Base className={p.className} title={p.title}>\n      <Points>\n        {data.map((pt) => (\n          <Point\n            title={p.pointTitleF?.(pt.orig) ?? ''}\n            key={pt.x + ' ' + pt.y}\n            style={{\n              backgroundColor: pointColour,\n              borderColor: pointColour,\n              left: `calc(${pt.x}% - ${barWidth}px)`,\n              bottom: 0,\n              height: `calc(${pt.y}% + ${barWidth}px)`,\n            }}\n          />\n        ))}\n      </Points>\n    </Base>\n  );\n};\n"],"names":[],"sourceRoot":""}